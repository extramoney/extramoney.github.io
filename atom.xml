<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小面包屑的博客</title>
  
  <subtitle>Code &amp; Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lethisis.com/"/>
  <updated>2017-11-01T09:21:48.000Z</updated>
  <id>http://lethisis.com/</id>
  
  <author>
    <name>小面包屑</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel 环境安装 Mac</title>
    <link href="http://lethisis.com/archives/adc6ee37.html"/>
    <id>http://lethisis.com/archives/adc6ee37.html</id>
    <published>2017-11-01T09:17:28.000Z</published>
    <updated>2017-11-01T09:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安裝Homestead"><a href="#安裝Homestead" class="headerlink" title="安裝Homestead"></a>安裝Homestead</h2><p> <em>Homestead = VirtualBox + Vargrnt + Homestead Vagrant Box + Homestead Scripts。</em></p><h3 id="安裝VirtualBox"><a href="#安裝VirtualBox" class="headerlink" title="安裝VirtualBox"></a>安裝VirtualBox</h3><p>到<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">VirtualBox Download</a>下载VirtualBox for OS X hosts</p><h3 id="安裝Vagrant"><a href="#安裝Vagrant" class="headerlink" title="安裝Vagrant"></a>安裝Vagrant</h3><p>到<a href="http://www.vagrantup.com/downloads.html" target="_blank" rel="external">Vagrant Download</a>下载Vagrant for OSX。</p><h3 id="下載Homestead"><a href="#下載Homestead" class="headerlink" title="下載Homestead"></a>下載Homestead</h3><h4 id="使用vagrant-box-add下载Homestead-vagrant-box"><a href="#使用vagrant-box-add下载Homestead-vagrant-box" class="headerlink" title="使用vagrant box add下载Homestead vagrant box"></a>使用vagrant box add下载Homestead vagrant box</h4><p><code>$ vagrant box add laravel/homestead</code></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">==&gt; box: Loading metadata <span class="keyword">for</span> box <span class="string">'laravel/homestead'</span></div><div class="line">    box: URL: https://vagrantcloud.com/laravel/homestead</div><div class="line">This box can work with multiple providers! The providers that it</div><div class="line">can work with are listed below. Please review the list and choose</div><div class="line">the provider you will be working with.</div><div class="line"></div><div class="line">1) parallels</div><div class="line">2) virtualbox</div><div class="line">3) vmware_desktop</div><div class="line"></div><div class="line">Enter your choice: 2</div><div class="line">==&gt; box: Adding box <span class="string">'laravel/homestead'</span> (v4.0.0) <span class="keyword">for</span> provider: virtualbox</div><div class="line">    box: Downloading: https://vagrantcloud.com/laravel/boxes/homestead/versions/4.0.0/providers/virtualbox.box</div></pre></td></tr></table></figure><p>选择 2 ， virtualbox </p><p>下载链接有点慢，同时文件也较大，可以到这儿下载 <a href="https://atlas.hashicorp.com/laravel/boxes/homestead" target="_blank" rel="external">https://atlas.hashicorp.com/laravel/boxes/homestead</a></p><blockquote><p>到对应版本 URL 下然后增加 <code>/providers/.box</code> 就可以拿到单独的下载地址了，然后再 vagrant box add 就好啦</p></blockquote><ul><li>VirtualBox: <a href="https://atlas.hashicorp.com/laravel/boxes/homestead/versions/4.0.0/providers/virtualbox.box" target="_blank" rel="external">https://atlas.hashicorp.com/laravel/boxes/homestead/versions/4.0.0/providers/virtualbox.box</a></li><li>Vmware_Desktop: <a href="https://atlas.hashicorp.com/laravel/boxes/homestead/versions/4.0.0/providers/vmware_desktop.box" target="_blank" rel="external">https://atlas.hashicorp.com/laravel/boxes/homestead/versions/4.0.0/providers/vmware_desktop.box</a></li></ul><p><code>vagrant box add laravel/homestead /Users/{user}/Downloads/virtualbox.box</code></p><h5 id="修改virtualbox-box的版本号"><a href="#修改virtualbox-box的版本号" class="headerlink" title="修改virtualbox.box的版本号"></a>修改virtualbox.box的版本号</h5><p><code>cd ~/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead</code></p><p>方法一：<br>    1、该目录下添加文件metadata_url  </p><pre><code>`vi metadata_url `添加内容  https://atlas.hashicorp.com/laravel/homestead2、把版本号 0 重命名为 下载的virtualbox.box的版本，比如 4.0.0</code></pre><p>方法二：</p><pre><code>修改homestead.rb文件，将config.vm.box_version = settings[&quot;version&quot;]     ||= &quot;&gt;= 0.4.4&quot;修改为config.vm.box_version = settings[&quot;version&quot;] ||= &quot;&gt;=     0&quot;</code></pre><h4 id="下载Vagrantfile-Scripts"><a href="#下载Vagrantfile-Scripts" class="headerlink" title="下载Vagrantfile + Scripts"></a>下载Vagrantfile + Scripts</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/laravel/homestead.git Homestead</div><div class="line"></div><div class="line">Cloning into <span class="string">'Homestead'</span>...</div><div class="line">remote: Counting objects: 2604, <span class="keyword">done</span>.</div><div class="line">remote: Compressing objects: 100% (12/12), <span class="keyword">done</span>.</div><div class="line">remote: Total 2604 (delta 9), reused 15 (delta 9), pack-reused 2583</div><div class="line">Receiving objects: 100% (2604/2604), 484.91 KiB | 214.00 KiB/s, <span class="keyword">done</span>.</div><div class="line">Resolving deltas: 100% (1527/1527), <span class="keyword">done</span>.</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># achan @ achandeMac-mini in ~/Documents/WORKSPACE_PHP/Homestead on git:master o [10:18:44]</span></div><div class="line">$ ll</div><div class="line">total 176</div><div class="line">-rw-r--r--   1 achan  staff   187B 11  1 10:17 CHANGELOG.md</div><div class="line">-rw-r--r--   1 achan  staff   1.1K 11  1 10:17 LICENSE.txt</div><div class="line">-rw-r--r--   1 achan  staff   1.6K 11  1 10:17 Vagrantfile</div><div class="line">drwxr-xr-x   3 achan  staff   102B 11  1 10:17 bin</div><div class="line">-rw-r--r--   1 achan  staff   809B 11  1 10:17 composer.json</div><div class="line">-rw-r--r--   1 achan  staff    55K 11  1 10:17 composer.lock</div><div class="line">-rw-r--r--   1 achan  staff   265B 11  1 10:17 init.bat</div><div class="line">-rw-r--r--   1 achan  staff   250B 11  1 10:17 init.sh</div><div class="line">-rw-r--r--   1 achan  staff   383B 11  1 10:17 phpunit.xml.dist</div><div class="line">-rw-r--r--   1 achan  staff   1.4K 11  1 10:17 readme.md</div><div class="line">drwxr-xr-x   7 achan  staff   238B 11  1 10:17 resources</div><div class="line">drwxr-xr-x  28 achan  staff   952B 11  1 10:17 scripts</div><div class="line">drwxr-xr-x   5 achan  staff   170B 11  1 10:17 src</div><div class="line">drwxr-xr-x   6 achan  staff   204B 11  1 10:17 tests</div></pre></td></tr></table></figure><blockquote><p><em>Vagrantfile</em> : 事實上將來每次下vagrant up指令時，就是在找這個檔案，這是Vagrant Box啟動時第一個執行的檔案，Homestead已經幫我們客製化了。</p><p><em>init.sh</em> : 建立自己的Homestead.yaml、after.sh與aliases，稍後會用到。</p><p><em>scripts目錄</em> : Homestead自己會用到的scripts，如homestead.rb就在此目錄下。</p></blockquote><h3 id="设置SSH密钥"><a href="#设置SSH密钥" class="headerlink" title="设置SSH密钥"></a>设置SSH密钥</h3><p>将会使用SSH方式连接Homestead，所以要设定SSH。</p><p><code>ssh-keygen -t rsa -C &quot;achan@homestead&quot;</code></p><h3 id="设置Homestead-yaml"><a href="#设置Homestead-yaml" class="headerlink" title="设置Homestead.yaml"></a>设置Homestead.yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># achan @ achandeMac-mini in ~/Documents/WORKSPACE_PHP/Homestead on git:master o [10:34:23]</span></div><div class="line">$ sh ./init.sh</div></pre></td></tr></table></figure><blockquote><p>init.sh會幫我們在~/.homestead/目錄建立Homestead.yaml ,還幫我們建立了after.sh與aliases</p></blockquote><h4 id="修改Homestead-yaml"><a href="#修改Homestead-yaml" class="headerlink" title="修改Homestead.yaml"></a>修改Homestead.yaml</h4><blockquote><p>homestead.rb會依照Homestead.yaml的設定為我們的Homestead做provision。</p></blockquote><p><code>$ vi Homestead.yaml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">ip: <span class="string">"192.168.10.10"</span></div><div class="line">memory: 2048</div><div class="line">cpus: 1</div><div class="line">provider: virtualbox</div><div class="line"></div><div class="line">authorize: ~/.ssh/id_rsa.pub</div><div class="line"></div><div class="line">keys:</div><div class="line">    - ~/.ssh/id_rsa</div><div class="line"></div><div class="line">folders:</div><div class="line">    - map: ~/code      //本机目录</div><div class="line">      to: /home/vagrant/code   //虚拟机映射目录</div><div class="line"></div><div class="line">sites:</div><div class="line">    - map: homestead.app</div><div class="line">      to: /home/vagrant/code/public</div><div class="line"></div><div class="line">databases:</div><div class="line">    - homestead</div><div class="line"></div><div class="line"><span class="comment"># blackfire:</span></div><div class="line"><span class="comment">#     - id: foo</span></div><div class="line"><span class="comment">#       token: bar</span></div><div class="line"><span class="comment">#       client-id: foo</span></div><div class="line"><span class="comment">#       client-token: bar</span></div><div class="line"></div><div class="line"><span class="comment"># ports:</span></div><div class="line"><span class="comment">#     - send: 50000</span></div><div class="line"><span class="comment">#       to: 5000</span></div><div class="line"><span class="comment">#     - send: 7777</span></div><div class="line"><span class="comment">#       to: 777</span></div><div class="line"><span class="comment">#       protocol: udp</span></div></pre></td></tr></table></figure><ul><li>ip : 設定Homestead的IP，若IP沒有相衝，可以不用修改。<ul><li>memory : 單位為MB，預設開2GB，若你嫌這樣太耗記憶體，根據經驗，512MB就可以讓Homestead啟動，不過有些service會失敗，1GB以上service都會正常，不過因為記憶體較少，有時會因為swap memory到HDD/SSD導致效能較差。</li></ul></li><li>cpu : 維持預設1顆CPU即可。</li><li>provider : 使用VirtualBox，不用修改。</li><li>authorize : 設定SSH public key位置，若之前ssh-keygen使用預設位置建立，則不用修改。</li><li>keys : 設定SSH private key位置，若之前ssh-keygen使用預設位置建立，則不用修改。</li><li>folders : Homestead.yaml重要的設定，設定Mac本機與Homestead的對應路徑。<pre><code>* map : 設定Mac本機Laravel專案路徑，可自行修改。預設值是~/Code，目前接受預設值即可。</code></pre><ul><li>to : 設定Homestead內Laravel專案路徑，可自行修改。目前接受預設值即可。<blockquote><p>事實上這就是VirtualBox的shared folder機制，我們知道VM最佳使用方式是環境灌在VM內，但專案放在本機，透過shared folder機制讓VM使用本機的專案，這樣的優點是儘管VM損毀開不了機，專案仍然不會受影響，因為專案是放在本機，只要再重新建立一個VM即可。</p></blockquote></li></ul></li></ul><ul><li><p>sites : Homestead.yaml重要的設定，讓你可以對Nginx設定網域主機名稱。</p><ul><li><p>map : 網域主機名稱。預設為homestead.app，目前接受預設值即可。</p></li><li><p>to : 此站台所對應的目錄名稱。預設為/home/vagrant/Projects/Laravel/public。因為Laravel的index.php放在public目錄下。目前接受預設值即可。</p></li></ul></li><li><p>databases : Homestead.yaml重要的設定，可以在此設定資料庫名稱，由Homestead幫你自動建立。目前維持預設homestead即可。</p></li><li><p>variables : 設定Lavavel全域變數，目前使用預設值即</p></li></ul><h5 id="创建-Code目录"><a href="#创建-Code目录" class="headerlink" title="创建 ~/Code目录"></a>创建 ~/Code目录</h5><p><code>$ cd ../</code><br><code>$ mkdir Code</code><br>Homestead.yaml 里面的~/Code目录并不存在，因此要创建一个。</p><h4 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h4><p>添加ip 与 主机名<br><code>192.168.10.10 homestead.app</code></p><h2 id="启动Homestead"><a href="#启动Homestead" class="headerlink" title="启动Homestead"></a>启动Homestead</h2><blockquote><p>使用vagrant up啟動Homestead</p></blockquote><p><code>vagrant init</code></p><p><code>vagrant up</code></p><blockquote><p>若此時打開VirtualBox，會發現有一個VM正在執行中，這也證明了Vagrant背後執行的是VirtualBox。</p></blockquote><h2 id="下载Laravel"><a href="#下载Laravel" class="headerlink" title="下载Laravel"></a>下载Laravel</h2><blockquote><p>使用vagrant ssh登入Homestead</p></blockquote><p><code>vagrant ssh</code></p><p>进入之前创建的Code目录<code>cd Code</code></p><p>使用composer 下载larval<br><code>composer create-project laravel/laravel Laravel --prefer-dist</code></p><p>由于国内网络问题，下载较慢。可以使用国内的镜像<br><a href="https://pkg.phpcomposer.com/" target="_blank" rel="external">Packagist / Composer 中国全量镜像</a></p><blockquote><p>統一將專案放在Code目錄下，其中Laravel為你的專案目錄名稱。</p><p>Composer將會建立一個Laravel目錄，並將Laravel所需要的檔案透過網路下載。<br>–prefer-dist : 此參數意思是下載用於distribution的穩定版本，而不是正在開發中的版本，對於應用來說，穩定版本較適當。</p></blockquote><h2 id="使用浏览器验证"><a href="#使用浏览器验证" class="headerlink" title="使用浏览器验证"></a>使用浏览器验证</h2><p>输入 <a href="http://homestead.app/" target="_blank" rel="external">http://homestead.app/</a><br><a href="http://homestead.app/" target="_blank" rel="external">Laravel</a></p><blockquote><p>若能在瀏覽器看到Laravel 5，恭喜你，Homestead與Laravel環境已經大功告成了。</p></blockquote><h2 id="增加更多网站"><a href="#增加更多网站" class="headerlink" title="增加更多网站"></a>增加更多网站</h2><blockquote><p>Homestead 环境配置完毕且成功运行后，你可能会想要为 Laravel 应用程序增加其他的 Nginx 站点。你可以在单个 Homestead 环境中运行多个 Laravel 程序。要添加其他网站，只需将网站配置信息添加到 Homestead.yaml 文件中：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sites:</div><div class="line">    - map: homestead.app</div><div class="line">      to: /home/vagrant/Code/Laravel/public</div><div class="line">    - map: another.app</div><div class="line">      to: /home/vagrant/Code/another/public</div></pre></td></tr></table></figure><blockquote><p>如果 Vagrant 没有自动管理你的「hosts」文件，你可能需要手动把新增的站点加入到该文件中：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.10.10  homestead.app</div><div class="line">192.168.10.10  another.app</div></pre></td></tr></table></figure><blockquote><p>添加站点后，从 Homestead 目录运行 vagrant reload –provision 命令就可以应用新的更改。</p><p><a href="http://oomusou.io/laravel/homestead/homestead-osx/" target="_blank" rel="external">如何在OS X安裝Homestead? | 點燈坊</a><br><a href="https://d.laravel-china.org/docs/5.5/homestead#adding-additional-sites" target="_blank" rel="external">Laravel 虚拟开发环境 Homestead | Laravel 5.5 中文文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安裝Homestead&quot;&gt;&lt;a href=&quot;#安裝Homestead&quot; class=&quot;headerlink&quot; title=&quot;安裝Homestead&quot;&gt;&lt;/a&gt;安裝Homestead&lt;/h2&gt;&lt;p&gt; &lt;em&gt;Homestead = VirtualBox + Vargrnt + Homestead Vagrant Box + Homestead Scripts。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;安裝VirtualBox&quot;&gt;&lt;a href=&quot;#安裝VirtualBox&quot; class=&quot;headerlink&quot; title=&quot;安裝VirtualBox&quot;&gt;&lt;/a&gt;安裝VirtualBox&lt;/h3&gt;&lt;p&gt;到&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VirtualBox Download&lt;/a&gt;下载VirtualBox for OS X hosts&lt;/p&gt;
&lt;h3 id=&quot;安裝Vagrant&quot;&gt;&lt;a href=&quot;#安裝Vagrant&quot; class=&quot;headerlink&quot; title=&quot;安裝Vagrant&quot;&gt;&lt;/a&gt;安裝Vagrant&lt;/h3&gt;&lt;p&gt;到&lt;a href=&quot;http://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant Download&lt;/a&gt;下载Vagrant for OSX。&lt;/p&gt;
&lt;h3 id=&quot;下載Homestead&quot;&gt;&lt;a href=&quot;#下載Homestead&quot; class=&quot;headerlink&quot; title=&quot;下載Homestead&quot;&gt;&lt;/a&gt;下載Homestead&lt;/h3&gt;&lt;h4 id=&quot;使用vagrant-box-add下载Homestead-vagrant-box&quot;&gt;&lt;a href=&quot;#使用vagrant-box-add下载Homestead-vagrant-box&quot; class=&quot;headerlink&quot; title=&quot;使用vagrant box add下载Homestead vagrant box&quot;&gt;&lt;/a&gt;使用vagrant box add下载Homestead vagrant box&lt;/h4&gt;&lt;p&gt;&lt;code&gt;$ vagrant box add laravel/homestead&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://lethisis.com/categories/php/"/>
    
    
      <category term="Laravel" scheme="http://lethisis.com/tags/Laravel/"/>
    
      <category term="mac" scheme="http://lethisis.com/tags/mac/"/>
    
      <category term="Homestead" scheme="http://lethisis.com/tags/Homestead/"/>
    
  </entry>
  
  <entry>
    <title>android内存管理</title>
    <link href="http://lethisis.com/archives/eaf0f2.html"/>
    <id>http://lethisis.com/archives/eaf0f2.html</id>
    <published>2017-10-30T08:52:31.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存管理机制概述"><a href="#内存管理机制概述" class="headerlink" title="内存管理机制概述"></a>内存管理机制概述</h2><blockquote><p>Android 的内存管理机制可以简单概括为：系统没有为内存提供交换区，它使用 <a href="http://en.wikipedia.org/wiki/Paging" target="_blank" rel="external">paging</a> （页式调度）与 <a href="http://en.wikipedia.org/wiki/Memory-mapped_files" target="_blank" rel="external">memory-mapping(mmapping)</a> 来管理内存。</p></blockquote><h3 id="为什么没有提供交换区？"><a href="#为什么没有提供交换区？" class="headerlink" title="为什么没有提供交换区？"></a>为什么没有提供交换区？</h3><blockquote><p>在linux里面，当物理内存不够用了，而又有新的程序请求分配内存，那么linux就会选择将其他程序暂时不用的数据交换到物理磁盘上(swap out)，等程序要用的时候再读进来(swap in)。这样做的坏处显而易见，swap in/swap out这里的代价比较大，相比数据一直放在内存里面，多了读磁盘的操作，而磁盘IO代价太大</p><p>The Android Runtime (ART) and Dalvik virtual machine use paging and memory-mapping (mmapping) to manage memory. This means that any memory an app modifies—whether by allocating new objects or touching mmapped pages—remains resident in RAM and cannot be paged out. The only way to release memory from an app is to release object references that the app holds, making the memory available to the garbage collector. That is with one exception: any files mmapped in without modification, such as code, can be paged out of RAM if the system wants to use that memory elsewhere.</p></blockquote><p>这意味着无论是分配一个新的对象或者touching mmapped pages ,  app的内存发生变化之后都会停留在RAM中，不会被paged out (换页到硬盘）。唯一释放内存的方法就是释放app持有的对象，让内存可以被GC(垃圾回收）。</p><p><em>有一点是例外的：如果系统想在其他地方使用该内存（切换app ,内存不足），同时采用mmapping映射到内存的代码文件（.odex）、资源文件(zipalign后的resource)没有发生改变，这部分内存就会被paged out 。</em></p><a id="more"></a><h2 id="垃圾回收GC-（Garbage-collection）"><a href="#垃圾回收GC-（Garbage-collection）" class="headerlink" title="垃圾回收GC （Garbage collection）"></a>垃圾回收GC （Garbage collection）</h2><h3 id="Android-Runtime-ART-and-Dalvik-virtual-machine"><a href="#Android-Runtime-ART-and-Dalvik-virtual-machine" class="headerlink" title="Android Runtime (ART) and Dalvik virtual machine"></a>Android Runtime (ART) and Dalvik virtual machine</h3><p><em>Dalvik</em>： Dalvik是Google公司自己设计用于Android平台的Java虚拟机它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统。执行的是字节码，它是依靠Just-In-Time (JIT)机制去解释字节码</p><p><em>ART</em>：即Android Runtime，google为了替代Dalvik专门为Android研发的。Android KK为开发者推出，L版本正式上线。比替代品更高效省电，执行的是本地机器码，依靠Ahead-Of-Time (AOT)机制</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-2aa8e66eb9cd6563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Android Runtime内存堆划分"></p><h3 id="what’s-gc"><a href="#what’s-gc" class="headerlink" title="what’s gc"></a>what’s gc</h3><blockquote><p>A managed memory environment, like the ART or Dalvik virtual machine, keeps track of each memory allocation. Once it determines that a piece of memory is no longer being used by the program, it frees it back to the heap, without any intervention from the programmer. The mechanism for reclaiming unused memory within a managed memory environment is known as garbage collection. Garbage collection has two goals: find data objects in a program that cannot be accessed in the future; and reclaim the resources used by those objects.</p></blockquote><p>ART 或者 DVM 会一直跟踪每一块内存的分配， 一旦发现某一块内存没有被使用，就会自动返还给内存堆。在管理内存环境中回收没有用内存堆机制，称之为垃圾回收(GC )。<br>GC有两个目的：</p><pre><code>1. 发现程序中在未来不会被访问到的数据对象2. 回收那些被对象使用的资源</code></pre><h3 id="generation"><a href="#generation" class="headerlink" title="generation"></a>generation</h3><blockquote><p>Android’s memory heap is a generational one, meaning that there are different buckets of allocations that it tracks, based on the expected life and size of an object being allocated. For example, recently allocated objects belong in the Young generation. When an object stays active long enough, it can be promoted to an older generation, followed by a permanent generation.</p></blockquote><p>Android的内存堆是一块大的内存空间，基于可预期的存活周期和分配的大小，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p><blockquote><p>新生代：Young Generation，主要用来存放新生的对象。<br>老年代：Old Generation或者称作Tenured Generation，主要存放应用程序生命周期长的内存对象。</p><p>/永久代：在JDK1.6版本之后，永久代就要被取消掉了，只留下年轻代和老年代。（方法区，不属于java堆，另一个别名为“非堆Non-Heap”但是一般查看PrintGCDetails都会带上PermGen区）是指内存的永久保存区域，主要存放Class和Meta的信息,Class在被 Load的时候被放入PermGen space区域. 它和和存放Instance的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用会加载很多Class的话,就很可能出现PermGen space错误。/</p><p>堆大小 = 新生代 + 老年代。其中，堆的大小可以通过参数 –Xms、-Xmx 来指定。<br>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。<br>默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。<br>JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。<br>因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-7d6835ec905101c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Generation"></p><h3 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h3><blockquote><p>Each heap generation has its own dedicated upper limit on the amount of memory that objects there can occupy. Any time a generation starts to fill up, the system executes a garbage collection event in an attempt to free up memory. The duration of the garbage collection depends on which generation of objects it’s collecting and how many active objects are in each generation.</p></blockquote><p>堆的每一个区域的对象占据的内存都有上限 ，只要某一代开始占满，系统就会执行一个GC事件尝试去释放内存。触发暂停的时间依赖于在某代和有多少可回收的对象</p><blockquote><p>Even though garbage collection can be quite fast, it can still affect your app’s performance. You don’t generally control when a garbage collection event occurs from within your code. The system has a running set of criteria for determining when to perform garbage collection. When the criteria are satisfied, the system stops executing the process and begins garbage collection. If garbage collection occurs in the middle of an intensive processing loop like an animation or during music playback, it can increase processing time. This increase can potentially push code execution in your app past the recommended 16ms threshold for efficient and smooth frame rendering.</p></blockquote><p>即使GC是相当快的，但仍然会影响到app的性能。你不能用代码来直接控制gc事件的发生。系统有一套执行GC的标准，符合条件后，系统会停止执行中的进程，开始GC。如果GC发生在一个循环处理的过程当中（动画或者音乐回放），会增加其处理的时间。这个增加的时间可能会影响app的帧数，导致达不到推荐的16ms閾值。(<em>Android 屏幕 每秒刷新60hz，相当于16ms渲染，超过16ms，将在下次16ms中刷新，故产生卡顿。</em>)</p><blockquote><p>Additionally, your code flow may perform kinds of work that force garbage collection events to occur more often or make them last longer-than-normal. For example, if you allocate multiple objects in the innermost part of a for-loop during each frame of an alpha blending animation, you might pollute your memory heap with a lot of objects. In that circumstance, the garbage collector executes multiple garbage collection events and can degrade the performance of your app.</p></blockquote><p>你的代码流可能会让GC事件频繁发生，执行时间变长。例如，在每一帧的混合动画中，在for循环的内部处理多个对象，这样可能就会污染到内存堆。在这种场景，GC会执行多次，这样就会降低app的性能。</p><blockquote><p>For more general information about garbage collection, see <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science" target="_blank" rel="external">Garbage collection</a>).</p></blockquote><h2 id="Sharing-Memory-内存共享）"><a href="#Sharing-Memory-内存共享）" class="headerlink" title="Sharing Memory(内存共享）"></a>Sharing Memory(内存共享）</h2><ul><li>每一个app进程都是由Zygote fork 出来的，当系统启动时zygote开启，加载framework code和resource(如activity theme) 。 然后系统会fork zygote 开启一个新的app进程，在此进程中加载运行app的代码。这个模式允许大部分分配到framework code 跟 resource的RAM pages 能够跨进程共享。</li><li><p>大部分到静态数据是采用mmapped 到进程内，mmapped允许进程间共享数据，也允许paged out 出RAM 。<br>静态数据包括：<br>1、 Dalvik code（将直接mmapping的放置在 预连接的.ode文件）<br>2、app resources（设计成结构后能mmapp 的resource table，apk中的对齐后的zip实体，也是zipalign app）<br>3、传统的项目元素（如.so文件中的native code）</p></li><li><p>在很多地方，Android通过显式的分配共享内存区域（ashmem或gralloc） 来跨进程共享 相同的动态RAM。例如：window surfaces在app和screen compositor之间共享内存，cursor buffer在content provider和client之间共享内存。</p></li></ul><h2 id="分配与回收-Allocating-and-Reclaiming-App-Memory"><a href="#分配与回收-Allocating-and-Reclaiming-App-Memory" class="headerlink" title="分配与回收 (Allocating and Reclaiming App Memory)"></a>分配与回收 (Allocating and Reclaiming App Memory)</h2><blockquote><p>app进程的Dalvik heap被限制在 single virtual memory range（单独一块的虚拟内存范围内），heap size可以增加，但是系统定义了上限。</p><p>heap使用的虚拟内存 不等于 使用的物理内存大小。当监测 APP的heap时，Android统计一个数值被称为Proportional Set Size（PSS），PSS包含与其他进程共享的 dirty and clean pages，但共享内存只统计 一个app所占RAM比例的大小（如：<em>3个app共享15个pages，则PSS中共享内存为5个pages</em>）。系统认为PSS是物理内存的footprint（印记，也就是消耗了，像碳排放印记）。<br>Dalvik堆栈不计算堆栈的逻辑大小，也就是Android不会对heap进行碎片整理来释放堆栈的空间。android只能通过删除堆栈的尾部不用的空间来减少堆栈的大小，但这并不是说物理内存不能被压缩（不能从堆栈中间删除数据）。</p><p>GC回收器会浏览堆栈，并把堆栈中不用的页空间回收到内核通过madvise这个函数（这个函数可以对映射的内存提出使用建议，从而提高内存）。所以，成对分配与回收大块的数据可以全部（几乎全部）回收物理内存。然而用同样的方式回收小块数据的效率就低了。因为小块数据可能还被其他的使用，且引用还没有释放。</p></blockquote><h2 id="限制App内存-Restricting-App-Memory"><a href="#限制App内存-Restricting-App-Memory" class="headerlink" title="限制App内存(Restricting App Memory)"></a>限制App内存(Restricting App Memory)</h2><blockquote><p>为了维护多任务的运行，android 为每个应用设置了一个硬性的内存堆栈限制，一旦应用使用的内存超过这个值就会报OUtOfMemoryError的错误。</p><p>一些情况下，你的应用可能需要知道当前运行系统环境对堆栈内存的限制大小是多少，从而做出合理的操作，不如缓存多少数据，使用高清图片还是普通图片。可以通过getMemoryClass()的方式获取这个限制的大小，详见<a href="http://developer.android.com/training/articles/memory.html#CheckHowMuchMemory" target="_blank" rel="external">Check how much memory you should use</a></p></blockquote><h2 id="app切换（-Switching-apps）"><a href="#app切换（-Switching-apps）" class="headerlink" title="app切换（ Switching apps）"></a>app切换（ Switching apps）</h2><blockquote><p>当用户切换应用的时候，别切换到后端的应用使用的内存并没有被切换或者删除，进程会被缓存到LRU缓存中。比如用户首先启动了一个应用，系统会创建一个进程，当用户离开这个应用，这个进程并没有退出，而是别缓存到LRU缓存中，所以当用户再次返回到这个应用的时候，能更快速更高效的启动，从而应用切换更快。</p><p>如果你的应用被缓存到LRU中，还在不断的申请内存或不释放占用的（不需要的）内存，这会影响到系统的性能，所以，当系统进行到内存低可用的时候，会从LRU缓存中最早一个被缓存的程序开始移除（释放进程暂用的资源），同时也会考虑应用所暂用的内存的大小。为了能让你的应用尽可能长的在LRU中缓存，可以更加以下建议释放引用的资源。</p><p>更多关于系统入会缓存应用到LRU已经如何移除应用，参考<a href="http://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="external">Processes and Threads</a></p><p><a href="http://blog.csdn.net/chaihuasong/article/details/8289367" target="_blank" rel="external">Android内存管理机制详解 - CSDN博客</a><br><a href="http://www.jianshu.com/p/5acb7146371b" target="_blank" rel="external">Android 开发进阶之『清除应用中的内存泄漏』 - 简书</a><br><a href="https://zhuanlan.zhihu.com/p/27176914" target="_blank" rel="external">谈谈Android的内存管理机制</a><br><a href="https://developer.android.com/topic/performance/memory-overview.html" target="_blank" rel="external">Overview of Android Memory Management | Android Developers</a><br><a href="http://blog.csdn.net/u014099894/article/details/53239859" target="_blank" rel="external">Android 性能优化 内存优化 How Android Managers Memory - baiiu        - CSDN博客</a><br><a href="http://www.importnew.com/19593.html" target="_blank" rel="external">Java堆内存 - ImportNew</a><br><a href="http://blog.csdn.net/zhjali123/article/details/75270571" target="_blank" rel="external">http://blog.csdn.net/zhjali123/article/details/75270571</a><br><a href="http://blog.csdn.net/z8711042/article/details/18665933" target="_blank" rel="external">http://blog.csdn.net/z8711042/article/details/18665933</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存管理机制概述&quot;&gt;&lt;a href=&quot;#内存管理机制概述&quot; class=&quot;headerlink&quot; title=&quot;内存管理机制概述&quot;&gt;&lt;/a&gt;内存管理机制概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Android 的内存管理机制可以简单概括为：系统没有为内存提供交换区，它使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Paging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;paging&lt;/a&gt; （页式调度）与 &lt;a href=&quot;http://en.wikipedia.org/wiki/Memory-mapped_files&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;memory-mapping(mmapping)&lt;/a&gt; 来管理内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么没有提供交换区？&quot;&gt;&lt;a href=&quot;#为什么没有提供交换区？&quot; class=&quot;headerlink&quot; title=&quot;为什么没有提供交换区？&quot;&gt;&lt;/a&gt;为什么没有提供交换区？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在linux里面，当物理内存不够用了，而又有新的程序请求分配内存，那么linux就会选择将其他程序暂时不用的数据交换到物理磁盘上(swap out)，等程序要用的时候再读进来(swap in)。这样做的坏处显而易见，swap in/swap out这里的代价比较大，相比数据一直放在内存里面，多了读磁盘的操作，而磁盘IO代价太大&lt;/p&gt;
&lt;p&gt;The Android Runtime (ART) and Dalvik virtual machine use paging and memory-mapping (mmapping) to manage memory. This means that any memory an app modifies—whether by allocating new objects or touching mmapped pages—remains resident in RAM and cannot be paged out. The only way to release memory from an app is to release object references that the app holds, making the memory available to the garbage collector. That is with one exception: any files mmapped in without modification, such as code, can be paged out of RAM if the system wants to use that memory elsewhere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这意味着无论是分配一个新的对象或者touching mmapped pages ,  app的内存发生变化之后都会停留在RAM中，不会被paged out (换页到硬盘）。唯一释放内存的方法就是释放app持有的对象，让内存可以被GC(垃圾回收）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;有一点是例外的：如果系统想在其他地方使用该内存（切换app ,内存不足），同时采用mmapping映射到内存的代码文件（.odex）、资源文件(zipalign后的resource)没有发生改变，这部分内存就会被paged out 。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="内存" scheme="http://lethisis.com/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="memory" scheme="http://lethisis.com/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>fitsSystemWindows理解</title>
    <link href="http://lethisis.com/archives/6c4eb5e4.html"/>
    <id>http://lethisis.com/archives/6c4eb5e4.html</id>
    <published>2017-10-25T06:45:12.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fitsSystemWindows-的定义"><a href="#fitsSystemWindows-的定义" class="headerlink" title="fitsSystemWindows 的定义"></a>fitsSystemWindows 的定义</h2><blockquote><p>Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.</p></blockquote><p>这个一个boolean值的内部属性，让view可以根据系统窗口(如status bar)来调整自己的布局，如果值为true,就会调整view的paingding属性来给system windows留出空间。<strong>只有在非嵌入式的activity的view才有效果。</strong></p><h2 id="fitsSystemWindows-的作用"><a href="#fitsSystemWindows-的作用" class="headerlink" title="fitsSystemWindows 的作用"></a>fitsSystemWindows 的作用</h2><blockquote><p><a href="http://developer.android.com/reference/android/view/View.html#attr_android:fitsSystemWindows" target="_blank" rel="external"><strong>android:fitsSystemWindows</strong></a><strong>=”true”</strong> attribute gives you: it sets the padding of the View to ensure the contents don’t overlay the system windows.</p></blockquote><p>设置View的padding，确定content不会与system windows重叠。<br><a id="more"></a></p><blockquote><p>A few things to keep in mind: </p><ul><li>fitsSystemWindows is applied depth first <em> — ordering matters: it’s the first View that consumes the insets that makes a difference<br><strong>Insets are always relative to the full window</strong> — insets may be applied even before layout happens, so don’t assume the default behavior knows anything about the position of a View when applying its padding<br><em>*Any other padding you’ve set is overwritten</em></em> — you’ll note that paddingLeft /paddingTop /etc is ineffective if you are using android:fitsSystemWindows=”true” on the same View</li></ul></blockquote><p>有几点是需要注意的： </p><ul><li>属性需要在root view设置，只有root view消费insets才会生效。</li><li>insets 是相对于全屏幕的。insets（边框）可能在 layout 之前（view生产之前）就已经设置， 所以insets的padding值，绝不会是相对于view的位置，而是相对于全屏幕。</li><li>任何你设置的padding都会被覆盖。 在同一个view上面设置了 android:fitsSystemWindows=”true”  的同时，还设置了 paddingLeft  paddingTop 等等，后者不会生效。 </li></ul><blockquote><p>如果想让RecycleView的内容滚动到状态栏之下, 可以同时设置android:fitsSystemWindows=”true”和android:clipToPadding=”false”, 这样在布局初始化的时候,内容不会在状态栏之下, 滚动的时候, 内容可以滚到状态栏之下;<br>::android:clipToPadding=”false”的作用是是让padding的位置也可以用来绘制, clipToPadding默认是true::</p></blockquote><h2 id="自定义fitsSystemWindows"><a href="#自定义fitsSystemWindows" class="headerlink" title="自定义fitsSystemWindows"></a>自定义fitsSystemWindows</h2><blockquote><p>On <a href="http://developer.android.com/about/versions/kitkat.html" target="_blank" rel="external">KitKat</a> and below, your custom View could override <a href="http://developer.android.com/reference/android/view/View.html#fitSystemWindows%28android.graphics.Rect%29" target="_blank" rel="external">fitSystemWindows()</a><br> and provide any functionality you wanted — just return true<br> if you’ve consumed the insets or false if you’d like to give other Views a chance.</p></blockquote><p>在KitKat(4.4)或者4.4以下的版本，在自定义view中重写<code>fitSystemWindows()</code>方法，如果要消费insets则返回true , 返回false则让其他view去消费。</p><blockquote><p>on <a href="http://developer.android.com/about/versions/lollipop.html" target="_blank" rel="external">Lollipop</a> and higher devices, we provide some new APIs to make customizing this behavior much easier and consistent with other behaviors for Views. You’ll instead override <a href="http://developer.android.com/reference/android/view/View.html#onApplyWindowInsets%28android.view.WindowInsets%29" target="_blank" rel="external">onApplyWindowInsets()</a>, which allows the View to consume as much or as little of the insets as you need and be able to call <a href="http://developer.android.com/reference/android/view/View.html#dispatchApplyWindowInsets%28android.view.WindowInsets%29" target="_blank" rel="external">dispatchApplyWindowInsets()</a> on child views as needed.</p></blockquote><p>Lollipop(5.0) 或者 5.0以上版本， 提供了新的API ,只要重写<code>onApplyWindowInsets()</code>，就能允许自定义view去消费任何大小的insets ，并且能调用<code>dispatchApplyWindowInsets()</code> 让子view接着消费insets。</p><blockquote><p><strong>you don’t even need to subclass your Views if you only need custom behavior on Lollipop and higher </strong>—<strong> </strong>you can use <a href="http://developer.android.com/reference/android/support/v4/view/ViewCompat.html#setOnApplyWindowInsetsListener%28android.view.View,%20android.support.v4.view.OnApplyWindowInsetsListener%29" target="_blank" rel="external">ViewCompat.setOnApplyWindowInsetsListener()</a>, which will be given preference over the View’s onApplyWindowInsets(). <a href="http://developer.android.com/reference/android/support/v4/view/ViewCompat.html" target="_blank" rel="external">ViewCompat</a> also provides helper methods for calling <a href="http://developer.android.com/reference/android/support/v4/view/ViewCompat.html#onApplyWindowInsets%28android.view.View,%20android.support.v4.view.WindowInsetsCompat%29" target="_blank" rel="external">onApplyWindowInsets(</a><a href="http://developer.android.com/reference/android/support/v4/view/ViewCompat.html#onApplyWindowInsets%28android.view.View,%20android.support.v4.view.WindowInsetsCompat%29" target="_blank" rel="external"><em>)</em></a> and <a href="http://developer.android.com/reference/android/support/v4/view/ViewCompat.html#dispatchApplyWindowInsets%28android.view.View,%20android.support.v4.view.WindowInsetsCompat%29" target="_blank" rel="external">dispatchApplyWindowInsets()</a> without version checking.</p></blockquote><p>在Lollipop(5.0)或者5.0以上的版本，如果不想继承view的话，可以使用<code>ViewCompat.setOnApplyWindowInsetsListener()</code> ,  这个方法优先于<code>View.onApplyWindowInsets()</code>执行。<br>ViewCompat  同时也提供了 <code>onApplyWindowInsets()</code> <code>dispatchApplyWindowInsets()</code> ,解决了兼容性的问题。</p><h3 id="fitsSystemWindows-源码"><a href="#fitsSystemWindows-源码" class="headerlink" title="fitsSystemWindows 源码"></a>fitsSystemWindows 源码</h3><p> 根据<code>FITS_SYSTEM_WINDOWS</code>标志位，无论哪个版本，默认都是直接设置padding</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">fitSystemWindows</span><span class="params">(Rect insets)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_APPLYING_INSETS) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (insets == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Null insets by definition have already been consumed.</span></div><div class="line">                <span class="comment">// This call cannot apply insets since there are none to apply,</span></div><div class="line">                <span class="comment">// so return false.</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// If we're not in the process of dispatching the newer apply insets call,</span></div><div class="line">            <span class="comment">// that means we're not in the compatibility path. Dispatch into the newer</span></div><div class="line">            <span class="comment">// apply insets path and take things from there.</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mPrivateFlags3 |= PFLAG3_FITTING_SYSTEM_WINDOWS;</div><div class="line">                <span class="keyword">return</span> dispatchApplyWindowInsets(<span class="keyword">new</span> WindowInsets(insets)).isConsumed();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mPrivateFlags3 &amp;= ~PFLAG3_FITTING_SYSTEM_WINDOWS;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// We're being called from the newer apply insets path.</span></div><div class="line">            <span class="comment">// Perform the standard fallback behavior.</span></div><div class="line">            <span class="keyword">return</span> fitSystemWindowsInt(insets);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">fitSystemWindowsInt</span><span class="params">(Rect insets)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((mViewFlags &amp; FITS_SYSTEM_WINDOWS) == FITS_SYSTEM_WINDOWS) &#123;</div><div class="line">            mUserPaddingStart = UNDEFINED_PADDING;</div><div class="line">            mUserPaddingEnd = UNDEFINED_PADDING;</div><div class="line">            Rect localInsets = sThreadLocal.get();</div><div class="line">            <span class="keyword">if</span> (localInsets == <span class="keyword">null</span>) &#123;</div><div class="line">                localInsets = <span class="keyword">new</span> Rect();</div><div class="line">                sThreadLocal.set(localInsets);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">boolean</span> res = computeFitSystemWindows(insets, localInsets);</div><div class="line">            mUserPaddingLeftInitial = localInsets.left;</div><div class="line">            mUserPaddingRightInitial = localInsets.right;</div><div class="line">            internalSetPadding(localInsets.left, localInsets.top,</div><div class="line">                    localInsets.right, localInsets.bottom);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> WindowInsets <span class="title">onApplyWindowInsets</span><span class="params">(WindowInsets insets)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_FITTING_SYSTEM_WINDOWS) == <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">// We weren't called from within a direct call to fitSystemWindows,</span></div><div class="line">          <span class="comment">// call into it as a fallback in case we're in a class that overrides it</span></div><div class="line">          <span class="comment">// and has logic to perform.</span></div><div class="line">          <span class="keyword">if</span> (fitSystemWindows(insets.getSystemWindowInsets())) &#123;</div><div class="line">              <span class="keyword">return</span> insets.consumeSystemWindowInsets();</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// We were called from within a direct call to fitSystemWindows.</span></div><div class="line">          <span class="keyword">if</span> (fitSystemWindowsInt(insets.getSystemWindowInsets())) &#123;</div><div class="line">              <span class="keyword">return</span> insets.consumeSystemWindowInsets();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> insets;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="fitsSystemWindows实例"><a href="#fitsSystemWindows实例" class="headerlink" title="fitsSystemWindows实例"></a>fitsSystemWindows实例</h2><blockquote><p>系统的基本控件（(FrameLayout, LinearLayout, 等）都使用默认的行为，Support 包中有些控件使用了自定义行为。<br>一个使用自定义行为的示例就是<a href="http://www.google.com/design/spec/patterns/navigation-drawer.html" target="_blank" rel="external">侧边栏</a>，侧边栏打开的时候，内容是占满整个屏幕高度的，状态栏显示为透明的，下面是 侧边栏的内容。<br><img src="http://upload-images.jianshu.io/upload_images/1760285-f5fcdb3639027eb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这里 <a href="http://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html" target="_blank" rel="external">DrawerLayout</a> 使用 fitsSystemWindows 来表明需要处理 insets，但是仍然使用状态栏的颜色来绘制状态栏背景（状态栏颜色为 主题的 colorPrimaryDark 所设置的颜色）。<br>然后 DrawerLayout 在每个子 View 上调用 dispatchApplyWindowInsets() 函数，这样 子 View 也有 机会处理 insets，这和系统默认行为是不一样的（系统默认行为只是吃掉这个 insets，然后子 View 无法继续处理）。<br><a href="http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html" target="_blank" rel="external">CoordinatorLayout</a> 对此也做了特殊处理，让每个子 View 的 <a href="http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html" target="_blank" rel="external">Behavior</a> 可以根据系统窗口的大小来做不同的处理。 还使用 fitsSystemWindows 属性来判断是否需要绘制状态栏背景。<br>通用 <a href="http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html" target="_blank" rel="external">CollapsingToolbarLayout</a> 也根据 fitsSystemWindows 属性来确定何时何地绘制 内容上方的半透明背景。<br>在 <a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">cheesesquare</a> 示例项目中演示了这些 fitsSystemWindows 使用场景，可以下载该示例项目查看如何使用的。</p></blockquote><p>也可以参考这个项目：</p><blockquote><p> <a href="https://github.com/Jude95/FitSystemWindowLayout" target="_blank" rel="external">https://github.com/Jude95/FitSystemWindowLayout</a></p><p>参考：<br><a href="https://stackoverflow.com/questions/3355367/height-of-statusbar" target="_blank" rel="external">https://stackoverflow.com/questions/3355367/height-of-statusbar</a><br><a href="http://blog.chengyunfeng.com/?p=905" target="_blank" rel="external">http://blog.chengyunfeng.com/?p=905</a><br><a href="https://stackoverflow.com/questions/28387289/fitsystemwindows-programmatically-for-status-bar-transparency" target="_blank" rel="external">https://stackoverflow.com/questions/28387289/fitsystemwindows-programmatically-for-status-bar-transparency</a><br><a href="http://www.jianshu.com/p/f3683e27fd94" target="_blank" rel="external">http://www.jianshu.com/p/f3683e27fd94</a><br><a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html" target="_blank" rel="external">https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html</a><br><a href="https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec?linkId=19685562" target="_blank" rel="external">https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec?linkId=19685562</a><br><a href="https://github.com/hehonghui/android-tech-frontier/blob/master/issue-35/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E7%94%A8fitsSystemWindows.md" target="_blank" rel="external">https://github.com/hehonghui/android-tech-frontier/blob/master/issue-35/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E7%94%A8fitsSystemWindows.md</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;fitsSystemWindows-的定义&quot;&gt;&lt;a href=&quot;#fitsSystemWindows-的定义&quot; class=&quot;headerlink&quot; title=&quot;fitsSystemWindows 的定义&quot;&gt;&lt;/a&gt;fitsSystemWindows 的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个一个boolean值的内部属性，让view可以根据系统窗口(如status bar)来调整自己的布局，如果值为true,就会调整view的paingding属性来给system windows留出空间。&lt;strong&gt;只有在非嵌入式的activity的view才有效果。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;fitsSystemWindows-的作用&quot;&gt;&lt;a href=&quot;#fitsSystemWindows-的作用&quot; class=&quot;headerlink&quot; title=&quot;fitsSystemWindows 的作用&quot;&gt;&lt;/a&gt;fitsSystemWindows 的作用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#attr_android:fitsSystemWindows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;android:fitsSystemWindows&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;=”true”&lt;/strong&gt; attribute gives you: it sets the padding of the View to ensure the contents don’t overlay the system windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置View的padding，确定content不会与system windows重叠。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="fitsSystemWindows" scheme="http://lethisis.com/tags/fitsSystemWindows/"/>
    
      <category term="浸入式" scheme="http://lethisis.com/tags/%E6%B5%B8%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>自定义view富文本RichText</title>
    <link href="http://lethisis.com/archives/a0ce5bca.html"/>
    <id>http://lethisis.com/archives/a0ce5bca.html</id>
    <published>2017-10-19T05:35:39.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于api接口传过来的是富文本，使用的图片加载框架是facebook的fesco ，在想能不能在imageGetter里面使用fresco处理图片信息。于是google了一下，发现有一个RichText的自定义view。但在使用的过程中，BitmapDrawable在draw()的时候draw不出来，于是对drawable做处理。</p><p>原来的UrlDrawable ,使用了 drawable.draw(canvas)方法。canvas.drawBitmap(mBitmap, 0, 0, getPaint());能不能代替呢<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDrawable</span> <span class="keyword">extends</span> <span class="title">BitmapDrawable</span> </span>&#123;</div><div class="line">       <span class="keyword">private</span> Drawable drawable;</div><div class="line"></div><div class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="title">URLDrawable</span><span class="params">()</span> </span>&#123;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (drawable != <span class="keyword">null</span>)</div><div class="line">               drawable.draw(canvas);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDrawable</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">           <span class="keyword">this</span>.drawable = drawable;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> Drawable <span class="title">getDrawable</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> drawable;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><blockquote><p>In general, drawing bitmaps is faster than drawing as with the right preparation, drawing a bitmap is just dumping memory to the screen. If you need to draw a scaled bitmap, then draw it as one using createScaledBitmap<br> rather than creating it then scaling it. You can achieve this by:<br>Bitmap myBitmap = BitmapFactory.decodeFile(myFile.getPath());myBitmap = myBitmap.createScaledBitmap(myBitmap, width, height, true);</p><p><a href="http://developer.android.com/reference/android/graphics/Bitmap.html#createScaledBitmap%28android.graphics.Bitmap,%20int,%20int,%20boolean%29" target="_blank" rel="external">The Android developers documentation on the above function</a><br>Calculating and drawing primitives while running takes calculations and when drawing many of them will decrease performance, so use more bitmaps where you can - but be careful of doing premature optimisation - there’s no point creating lots of bitmaps if there’s no need as there will not be a significance (i.e. noticable) performance increase.</p></blockquote><a id="more"></a><p>draw bimap的话速度是比较快的。当计算绘制多个图元 的时候会降低性能，所以尽可能使用bitmap。</p><p>因此，可以断定是由于性能降低的问题导致draw不出来。于是修改成canvas.drawBitmap(mBitmap, 0, 0, getPaint())。</p><p>在使用fresco时候也遇到了问题，Postprocessor 返回的bitmap才是最终的bitmap，而draweeHolder.getHierarchy().getTopLevelDrawable()是一个ArrayDrawable,里面含有一个Drawable数组，数组中的某一个才是你的目标图片。<br>只能使用这个方法获取，最后在onFinalImageSet 更新。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ImageRequest request = ImageRequestBuilder.newBuilderWithSource(Uri.parse(source))</div><div class="line">                    .setLowestPermittedRequestLevel(ImageRequest.RequestLevel.FULL_FETCH)</div><div class="line">                    .setPostprocessor(<span class="keyword">new</span> BasePostprocessor() &#123;</div><div class="line"></div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">                            <span class="keyword">super</span>.process(bitmap);</div><div class="line"></div><div class="line">                            <span class="keyword">int</span> height = Constant.ScreenWidth * bitmap.getHeight() / bitmap.getWidth();</div><div class="line">                            Bitmap sizeBitmap = bitmapScale(bitmap, d_w, height);</div><div class="line">                            myDrawable.setBitmap(sizeBitmap);</div><div class="line">                            myDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, d_w, height);</div><div class="line"></div><div class="line">                            bitmapList.add(sizeBitmap);</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;).build();</div></pre></td></tr></table></figure></p><p>源码在此：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RichText</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">support</span>.<span class="title">v7</span>.<span class="title">widget</span>.<span class="title">AppCompatTextView</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnImageClickListener onImageClickListener;<span class="comment">//图片点击回调</span></div><div class="line">    <span class="keyword">private</span> MultiDraweeHolder&lt;GenericDraweeHierarchy&gt; mMultiDraweeHolder;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> d_w = <span class="number">200</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> d_h = <span class="number">200</span>;</div><div class="line">    <span class="keyword">private</span> List&lt;Bitmap&gt; bitmapList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Bitmap placeHolderBitmap, errorBitmap;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RichText</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">        init(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RichText</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RichText</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.RichText);</div><div class="line"></div><div class="line">        d_w = typedArray.getDimensionPixelSize(R.styleable.RichText_default_width, Constant.ScreenWidth);</div><div class="line">        d_h = typedArray.getDimensionPixelSize(R.styleable.RichText_default_height, Constant.ScreenWidth / <span class="number">2</span>);</div><div class="line"></div><div class="line"></div><div class="line">        placeHolderBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.default_logo);</div><div class="line">        placeHolderBitmap = Bitmap.createScaledBitmap(placeHolderBitmap, d_w, d_h, <span class="keyword">true</span>);</div><div class="line"></div><div class="line"></div><div class="line">        errorBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.default_logo);</div><div class="line">        errorBitmap = Bitmap.createScaledBitmap(placeHolderBitmap, d_w, d_h, <span class="keyword">true</span>);</div><div class="line"></div><div class="line"></div><div class="line">        typedArray.recycle();</div><div class="line">        initDraweeHolder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDraweeHolder</span><span class="params">()</span> </span>&#123;</div><div class="line">        mMultiDraweeHolder = <span class="keyword">new</span> MultiDraweeHolder&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置富文本</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> text 富文本</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRichText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        Spanned spanned = Html.fromHtml(text, asyncImageGetter, <span class="keyword">null</span>);</div><div class="line">        SpannableStringBuilder spannableStringBuilder;</div><div class="line">        <span class="keyword">if</span> (spanned <span class="keyword">instanceof</span> SpannableStringBuilder) &#123;</div><div class="line">            spannableStringBuilder = (SpannableStringBuilder) spanned;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(spanned);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ImageSpan[] imageSpans = spannableStringBuilder.getSpans(<span class="number">0</span>, spannableStringBuilder.length(), ImageSpan.class);</div><div class="line">        <span class="keyword">final</span> List&lt;String&gt; imageUrls = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = imageSpans.length; i &lt; size; i++) &#123;</div><div class="line">            ImageSpan imageSpan = imageSpans[i];</div><div class="line">            String imageUrl = imageSpan.getSource();</div><div class="line">            <span class="keyword">int</span> start = spannableStringBuilder.getSpanStart(imageSpan);</div><div class="line">            <span class="keyword">int</span> end = spannableStringBuilder.getSpanEnd(imageSpan);</div><div class="line">            imageUrls.add(imageUrl);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</div><div class="line">            ClickableSpan clickableSpan = <span class="keyword">new</span> ClickableSpan() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (onImageClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">                        onImageClickListener.imageClicked(imageUrls, finalI);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            ClickableSpan[] clickableSpans = spannableStringBuilder.getSpans(start, end, ClickableSpan.class);</div><div class="line">            <span class="keyword">if</span> (clickableSpans != <span class="keyword">null</span> &amp;&amp; clickableSpans.length != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (ClickableSpan cs : clickableSpans) &#123;</div><div class="line">                    spannableStringBuilder.removeSpan(cs);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            spannableStringBuilder.setSpan(clickableSpan, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.setText(spanned);</div><div class="line">        setMovementMethod(LinkMovementMethod.getInstance());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 异步加载图片（依赖于fresco）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> Html.ImageGetter asyncImageGetter = <span class="keyword">new</span> Html.ImageGetter() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Drawable <span class="title">getDrawable</span><span class="params">(String source)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> URLDrawable myDrawable = <span class="keyword">new</span> URLDrawable(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">            GenericDraweeHierarchy mHierarchy = <span class="keyword">new</span> GenericDraweeHierarchyBuilder(getResources())</div><div class="line">                    .build();</div><div class="line">            <span class="keyword">final</span> DraweeHolder draweeHolder = <span class="keyword">new</span> DraweeHolder&lt;&gt;(mHierarchy);</div><div class="line">            mMultiDraweeHolder.add(draweeHolder);</div><div class="line"></div><div class="line"></div><div class="line">            ImageRequest request = ImageRequestBuilder.newBuilderWithSource(Uri.parse(source))</div><div class="line">                    .setLowestPermittedRequestLevel(ImageRequest.RequestLevel.FULL_FETCH)</div><div class="line">                    .setPostprocessor(<span class="keyword">new</span> BasePostprocessor() &#123;</div><div class="line"></div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">                            <span class="keyword">super</span>.process(bitmap);</div><div class="line"></div><div class="line">                            <span class="keyword">int</span> height = Constant.ScreenWidth * bitmap.getHeight() / bitmap.getWidth();</div><div class="line">                            Bitmap sizeBitmap = bitmapScale(bitmap, d_w, height);</div><div class="line">                            myDrawable.setBitmap(sizeBitmap);</div><div class="line">                            myDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, d_w, height);</div><div class="line"></div><div class="line">                            bitmapList.add(sizeBitmap);</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;).build();</div><div class="line"></div><div class="line"></div><div class="line">            DraweeController controller = Fresco.newDraweeControllerBuilder()</div><div class="line">                    .setOldController(draweeHolder.getController())</div><div class="line">                    .setImageRequest(request)</div><div class="line">                    .setControllerListener(<span class="keyword">new</span> ControllerListener&lt;ImageInfo&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubmit</span><span class="params">(String id, Object callerContext)</span> </span>&#123;</div><div class="line"></div><div class="line">                            myDrawable.setBitmap(placeHolderBitmap);</div><div class="line">                            myDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, d_w, d_h);</div><div class="line"></div><div class="line">                            RichText.<span class="keyword">this</span>.setText(getText());</div><div class="line">                        &#125;</div><div class="line"></div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinalImageSet</span><span class="params">(String id, ImageInfo imageInfo, Animatable animatable)</span> </span>&#123;</div><div class="line"></div><div class="line">                            RichText.<span class="keyword">this</span>.setText(getText());</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onIntermediateImageSet</span><span class="params">(String id, ImageInfo imageInfo)</span> </span>&#123;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onIntermediateImageFailed</span><span class="params">(String id, Throwable throwable)</span> </span>&#123;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String id, Throwable throwable)</span> </span>&#123;</div><div class="line"></div><div class="line">                            myDrawable.setBitmap(errorBitmap);</div><div class="line">                            myDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, d_w, d_h);</div><div class="line">                            RichText.<span class="keyword">this</span>.setText(getText());</div><div class="line"></div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRelease</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    .build();</div><div class="line">            draweeHolder.setController(controller);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> myDrawable;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">bitmapScale</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> newWidth, <span class="keyword">int</span> newHeight)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> width = bitmap.getWidth();</div><div class="line">        <span class="keyword">int</span> height = bitmap.getHeight();</div><div class="line">        <span class="comment">// 计算缩放比例</span></div><div class="line">        <span class="keyword">float</span> scaleWidth = ((<span class="keyword">float</span>) newWidth) / width;</div><div class="line">        <span class="keyword">float</span> scaleHeight = ((<span class="keyword">float</span>) newHeight) / height;</div><div class="line"></div><div class="line">        Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">        matrix.postScale(scaleWidth, scaleHeight); <span class="comment">//长和宽放大缩小的比例</span></div><div class="line">        Bitmap sizeBitmap = Bitmap.createBitmap(bitmap, <span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> sizeBitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDrawable</span> <span class="keyword">extends</span> <span class="title">BitmapDrawable</span> </span>&#123;</div><div class="line">        Bitmap mBitmap;</div><div class="line">        Rect mSrcRect;</div><div class="line">        Rect mDstRect;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">URLDrawable</span><span class="params">(Resources res, Bitmap bitmap)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(res, bitmap);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSrcRect</span><span class="params">(Rect srcRect)</span> </span>&#123;</div><div class="line">            mSrcRect = srcRect;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDstRect</span><span class="params">(Rect dstRect)</span> </span>&#123;</div><div class="line">            mDstRect = dstRect;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.draw(canvas);</div><div class="line"></div><div class="line">            <span class="comment">// 绘制 bitmap</span></div><div class="line">            <span class="keyword">if</span> (mBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mSrcRect != <span class="keyword">null</span> &amp;&amp; mDstRect != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    canvas.drawBitmap(mBitmap, mSrcRect, mDstRect, getPaint());</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDstRect != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> width = mBitmap.getWidth();</div><div class="line">                    <span class="keyword">int</span> height = mBitmap.getHeight();</div><div class="line"></div><div class="line">                    Rect srcRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">                    canvas.drawBitmap(mBitmap, srcRect, mDstRect, getPaint());</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                    canvas.drawBitmap(mBitmap, <span class="number">0</span>, <span class="number">0</span>, getPaint());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBitmap</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">            mBitmap = bitmap;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnImageClickListener</span><span class="params">(OnImageClickListener onImageClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onImageClickListener = onImageClickListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnImageClickListener</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 图片被点击后的回调方法</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * <span class="doctag">@param</span> imageUrls 本篇富文本内容里的全部图片</span></div><div class="line"><span class="comment">         * <span class="doctag">@param</span> position  点击处图片在imageUrls中的位置</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">imageClicked</span><span class="params">(List&lt;String&gt; imageUrls, <span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">        mMultiDraweeHolder.onDetach();</div><div class="line">        recycleBitmap();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTemporaryDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStartTemporaryDetach();</div><div class="line">        mMultiDraweeHolder.onDetach();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">        mMultiDraweeHolder.onAttach();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinishTemporaryDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onFinishTemporaryDetach();</div><div class="line">        mMultiDraweeHolder.onAttach();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recycleBitmap</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.e(<span class="string">"recycleBitmap"</span>, <span class="string">"recycleBitmap"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (placeHolderBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!placeHolderBitmap.isRecycled()) &#123;</div><div class="line">                placeHolderBitmap.recycle();</div><div class="line">                placeHolderBitmap = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (errorBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!errorBitmap.isRecycled()) &#123;</div><div class="line">                errorBitmap.recycle();</div><div class="line">                errorBitmap = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Bitmap bitmap : bitmapList) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (!bitmap.isRecycled()) &#123;</div><div class="line">                    bitmap.recycle();</div><div class="line">                    bitmap = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参考：<a href="http://www.cnblogs.com/waterbear/p/4954817.html" target="_blank" rel="external">http://www.cnblogs.com/waterbear/p/4954817.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于api接口传过来的是富文本，使用的图片加载框架是facebook的fesco ，在想能不能在imageGetter里面使用fresco处理图片信息。于是google了一下，发现有一个RichText的自定义view。但在使用的过程中，BitmapDrawable在draw()的时候draw不出来，于是对drawable做处理。&lt;/p&gt;
&lt;p&gt;原来的UrlDrawable ,使用了 drawable.draw(canvas)方法。canvas.drawBitmap(mBitmap, 0, 0, getPaint());能不能代替呢&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;URLDrawable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BitmapDrawable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Drawable drawable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;deprecation&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;URLDrawable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Canvas canvas)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (drawable != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               drawable.draw(canvas);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setDrawable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Drawable drawable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.drawable = drawable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Drawable &lt;span class=&quot;title&quot;&gt;getDrawable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; drawable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, drawing bitmaps is faster than drawing as with the right preparation, drawing a bitmap is just dumping memory to the screen. If you need to draw a scaled bitmap, then draw it as one using createScaledBitmap&lt;br&gt; rather than creating it then scaling it. You can achieve this by:&lt;br&gt;Bitmap myBitmap = BitmapFactory.decodeFile(myFile.getPath());myBitmap = myBitmap.createScaledBitmap(myBitmap, width, height, true);&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/graphics/Bitmap.html#createScaledBitmap%28android.graphics.Bitmap,%20int,%20int,%20boolean%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Android developers documentation on the above function&lt;/a&gt;&lt;br&gt;Calculating and drawing primitives while running takes calculations and when drawing many of them will decrease performance, so use more bitmaps where you can - but be careful of doing premature optimisation - there’s no point creating lots of bitmaps if there’s no need as there will not be a significance (i.e. noticable) performance increase.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="view" scheme="http://lethisis.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>android蓝牙了解</title>
    <link href="http://lethisis.com/archives/7e6ef032.html"/>
    <id>http://lethisis.com/archives/7e6ef032.html</id>
    <published>2017-10-19T02:51:10.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1760285-263801261bcec92c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="经典蓝牙与低功耗蓝牙的区别"></p><h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><p>作为一种通用的无线通信技术，规范自然是蓝牙技术的核心。蓝牙规范可分为两个层次，如图1所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-aed22569579efecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><a id="more"></a><h2 id="图1-蓝牙规范的层次结构"><a href="#图1-蓝牙规范的层次结构" class="headerlink" title="图1  蓝牙规范的层次结构"></a>图1  蓝牙规范的层次结构</h2><p>由图1可知蓝牙规范包括：</p><h3 id="Core-Specification（核心规范），用于规定蓝牙设备必须实现的通用功能和协议层次。它由软件和硬件模块组成，两个模块之间的信息和数据通过主机控制接口（HCI）的解释才能进行传递。"><a href="#Core-Specification（核心规范），用于规定蓝牙设备必须实现的通用功能和协议层次。它由软件和硬件模块组成，两个模块之间的信息和数据通过主机控制接口（HCI）的解释才能进行传递。" class="headerlink" title="Core Specification（核心规范），用于规定蓝牙设备必须实现的通用功能和协议层次。它由软件和硬件模块组成，两个模块之间的信息和数据通过主机控制接口（HCI）的解释才能进行传递。"></a>Core Specification（核心规范），用于规定蓝牙设备必须实现的通用功能和协议层次。它由软件和硬件模块组成，两个模块之间的信息和数据通过主机控制接口（HCI）的解释才能进行传递。</h3><h3 id="Profiles（蓝牙应用规范），它从应用场景的角度为蓝牙技术的使用制定了不同的规范。这也是和大众日常生活接触最多的一部分。蓝牙支持很多Profiles，下文将介绍几种使用最广泛的蓝牙应用规范。"><a href="#Profiles（蓝牙应用规范），它从应用场景的角度为蓝牙技术的使用制定了不同的规范。这也是和大众日常生活接触最多的一部分。蓝牙支持很多Profiles，下文将介绍几种使用最广泛的蓝牙应用规范。" class="headerlink" title="Profiles（蓝牙应用规范），它从应用场景的角度为蓝牙技术的使用制定了不同的规范。这也是和大众日常生活接触最多的一部分。蓝牙支持很多Profiles，下文将介绍几种使用最广泛的蓝牙应用规范。"></a>Profiles（蓝牙应用规范），它从应用场景的角度为蓝牙技术的使用制定了不同的规范。这也是和大众日常生活接触最多的一部分。蓝牙支持很多Profiles，下文将介绍几种使用最广泛的蓝牙应用规范。</h3><h2 id="蓝牙核心规范4-0"><a href="#蓝牙核心规范4-0" class="headerlink" title="蓝牙核心规范4.0"></a>蓝牙核心规范4.0</h2><p><img src="http://upload-images.jianshu.io/upload_images/1760285-530e4c78427e800e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="蓝牙核心规范4.0"></p><h3 id="Serial-Port-Profile-SPP-串口规范-available-from-Android-2-0-2-1"><a href="#Serial-Port-Profile-SPP-串口规范-available-from-Android-2-0-2-1" class="headerlink" title="Serial Port Profile (SPP)串口规范 available from Android (2.0/2.1)"></a>Serial Port Profile (SPP)串口规范 available from Android (2.0/2.1)</h3><p>通过spp可以把蓝牙当作RS-232这些串口线来使用，也就是说，单片机只用把数据通过TX,RX引脚写到蓝牙串口透传模块里面，数据就会通过蓝牙来收发，可以实现和带蓝牙功能的手机信息交换。<br>(iPhone的蓝牙SPP被屏蔽了，要想使用得先越狱然后通过BTStack来实现)。</p><h3 id="RFCOMM"><a href="#RFCOMM" class="headerlink" title="RFCOMM"></a>RFCOMM</h3><p>RFCOMM和SPP（串行端口模式）是同一事物的两个名字。 （然而，它们很密切的关系。）</p><p>Bluetooth serial connections are made as described in the SPP using <a href="http://developer.bluetooth.org/TechnologyOverview/Documents/RFCOMM_SPEC.pdf" target="_blank" rel="external">RFCOMM</a>. RFCOMM is a connection that runs over L2CAP and allows sending serial data and control parameters in frames. It is heavily based on an ancient standard called <a href="http://www.etsi.org/deliver/etsi_ts/101300_101399/101369/06.03.00_60/ts_101369v060300p.pdf" target="_blank" rel="external">TS 07.10</a>. SPP is the bluetooth profile.<br>在使用RFCOMM时候，蓝牙串口连接在SPP里面进行描述<strong>。**</strong>RFCOMM是运行在L2CAP连接**，并允许在帧发送串行数据和控制参数。这主要是基于一个古老的标准称为TS 07.10。 SPP 属于 Bluetooth Profile。</p><p>Bluetooth Socket的最常见的类型是RFCOMM，Android的API支持的类型。RFCOMM是蓝牙面向连接的，流媒体传输。<strong>也被称为 Serial Port Profile (SPP)。</strong></p><h1 id="版本变化"><a href="#版本变化" class="headerlink" title="版本变化"></a>版本变化</h1><h2 id="Android-3-0"><a href="#Android-3-0" class="headerlink" title="Android 3.0"></a>Android 3.0</h2><p>Bluetooth API就包含了对<strong>Bluetooth profiles</strong>的支持。Bluetooth profile是基于蓝牙的设备之间通信的无线接口规范。</p><h2 id="Android-4-2"><a href="#Android-4-2" class="headerlink" title="Android 4.2"></a>Android 4.2</h2><hr><p>引入了一种新的针对 Android 设备优化的 <strong>Bluetooth 协议栈 BlueDroid，从而取代 BlueZ 协议栈。</strong>Bluedroid 协议栈由 Google 和 Broadcom 公司共同开发，相对于 BlueZ 协议栈，BlueDroid 提升了兼容性和可靠性。</p><h2 id="Android-4-3"><a href="#Android-4-3" class="headerlink" title="Android 4.3"></a>Android 4.3</h2><p>最重要的是4.2的Bluedroid不支持BLE。不过在刚刚发布的Android 4.3中已经有了很多改进，AVRCP(<strong>Audio/Video Remote Control Profile</strong>) 1.3和BLE都得到了支持。</p><p>目前有一些Android 4.1或4.2的设备是支持BLE的，但是都是采用的Vendor自己的解决方案，比如Bluetooth stack采用Bluez 5.x，再提供Vendor BLE Android SDK.</p><h1 id="BluetoothAdapter"><a href="#BluetoothAdapter" class="headerlink" title="BluetoothAdapter"></a>BluetoothAdapter</h1><p>BluetoothAdapter类简单点来说就是代表了本设备(手机、电脑等)的蓝牙适配器对象，通过它我们可以蓝牙设备进行基本<br>    开发了，主要有如下功能：<br>             1、开关蓝牙设备<br>             2、扫描蓝牙设备<br>             3、设置/获取蓝牙状态信息，例如：蓝牙状态值、蓝牙Name、蓝牙Mac地址等；<br>本地蓝牙适配器BluetoothAdapter在JELLY_BEAN_MR1(Android 4.2)运行及以下时，调用静态方法getDefaultAdapter（）;<br>在JELLY_BEAN_MR2(Android 4.3)和更高的运行时，getSystemService（class）通过BLUETOOTH_SERVICE检索。<br>从根本上说，这是所有蓝牙行动的起点。一旦你的本地适配器，就可以得到一组代表与getBondedDevices所有配对设备BluetoothDevice类的对象（）;启动设备发现与startDiscovery（）;<br>启动设备发现与startDiscovery（）;或者创建一个BluetoothServerSocket监听与listenUsingRfcommWithServiceRecord（字符串，UUID）传入的连接请求。</p><h2 id="STATE-状态值-，-即开关状态"><a href="#STATE-状态值-，-即开关状态" class="headerlink" title="STATE 状态值 ， 即开关状态"></a>STATE 状态值 ， 即开关状态</h2><p>int STATE_OFF        蓝牙已经关闭<br>int STATE_ON        蓝牙已经打开<br>int STATE_TURNING_OFF      蓝牙处于关闭过程中 ，关闭ing<br>int STATE_TURNING_ON        蓝牙处于打开过程中 ，打开ing<br><img src="http://upload-images.jianshu.io/upload_images/1760285-4e54f2c8459feb28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="SCAN-MOD状态值-，即扫描状态"><a href="#SCAN-MOD状态值-，即扫描状态" class="headerlink" title="SCAN_MOD状态值 ，即扫描状态"></a>SCAN_MOD状态值 ，即扫描状态</h2><p>int  SCAN_MODE_CONNECTABLE         表明该蓝牙可以扫描其他蓝牙设备</p><p>int  SCAN_MODE_CONNECTABLE_DISCOVERABLE     表明该蓝牙设备同时可以扫码其他蓝牙设备，并且可以被其他蓝牙设备扫描到。</p><p> int  SCAN_MODE_NONE ： 该蓝牙不能扫描以及被扫描。</p><h2 id="蓝牙相关广播"><a href="#蓝牙相关广播" class="headerlink" title="蓝牙相关广播"></a>蓝牙相关广播</h2><p><strong>  Action值                                                说明</strong></p><hr><pre><code>**ACTION_STATE_CHANGED                  **  蓝牙状态值发生改变**ACTION_SCAN_MODE_CHANGED         **蓝牙扫描状态(SCAN_MODE)发生改变**ACTION_DISCOVERY_STARTED             **蓝牙扫描过程开始**ACTION_DISCOVERY_FINISHED            ** 蓝牙扫描过程结束**ACTION_LOCAL_NAME_CHANGED        **蓝牙设备Name发生改变**ACTION_REQUEST_DISCOVERABLE       **请求用户选择是否使该蓝牙能被扫描          PS：如果蓝牙没有开启，用户点击确定后，会首先开启蓝牙，继而设置蓝牙能被扫描。**ACTION_REQUEST_ENABLE                  **请求用户选择是否打开蓝牙**ACTION_FOUND  **(该常量字段位于BluetoothDevice类中，稍后讲到)          说明：蓝牙扫描时，扫描到任一远程蓝牙设备时，会发送此广播。</code></pre><h1 id="BluetoothDevice"><a href="#BluetoothDevice" class="headerlink" title="BluetoothDevice"></a>BluetoothDevice</h1><p>代表一个远程蓝牙设备。让你创建一个带有各自设备的BluetoothDevice或者查询其皆如名称、地址、类和连接状态等信息。<br>对于蓝牙硬件地址而言，这个类仅仅是一个瘦包装器。这个类的对象是不可改变的。这个类上的操作会使用这个用来创建BluetoothDevice类的BluetoothAdapter类执行在远程蓝牙硬件上。<br>为了获得BluetoothDevice,类，使用<strong>BluetoothAdapter.getRemoteDevice(String)</strong>方法去创建一个表示 已知MAC地址的设备（用户可以通过带有BluetoothAdapter类来完成对设备的查找）或者从一个通过 <strong>BluetoothAdapter.getBondedDevices()</strong>得到返回值的有联系的设备集合来得到该设备。</p><h1 id="BluetoothSocket-BluetoothServerSocket"><a href="#BluetoothSocket-BluetoothServerSocket" class="headerlink" title="BluetoothSocket /BluetoothServerSocket"></a>BluetoothSocket /BluetoothServerSocket</h1><p>已连接或连接到蓝牙套接字(socket)。<br>蓝牙端口监听接口和TCP端口类似：Socket和ServerSocket类。在服务器端，使用BluetoothServerSocket类来创建一个 监听服务端口。当一个连接被BluetoothServerSocket所接受，它会返回一个新的BluetoothSocket来管理该连接。在客户 端，使用一个单独的BluetoothSocket类去初始化一个外接连接和管理该连接。<br>最通常使用的蓝牙端口是RFCOMM，它是被Android API支持的类型。RFCOMM是一个面向连接，通过蓝牙模块进行的数据流传输方式，它也被称为串行端口规范（Serial Port Profile，SPP）。<br>为了创建一个BluetoothSocket去连接到一个已知设备，使用方法 BluetoothDevice.createRfcommSocketToServiceRecord()。然后调用connect()方法去尝试一个 面向远程设备的连接。这个调用将被阻塞指导一个连接已经建立或者该链接失效。<br>每当该端口连接成功，无论它初始化为客户端，或者被接受作为服务器端，通过getInputStream()和getOutputStream()来打开IO流，从而获得各自的InputStream和OutputStream对象。<br>BluetoothSocket类线程安全。特别的，close()方法总会马上放弃外界操作并关闭服务器端口。</p><h1 id="Android-4-3中引入了一个新的类BluetoothManager"><a href="#Android-4-3中引入了一个新的类BluetoothManager" class="headerlink" title="Android 4.3中引入了一个新的类BluetoothManager"></a>Android 4.3中引入了一个新的类<strong>BluetoothManager</strong></h1><h1 id="蓝牙协议栈"><a href="#蓝牙协议栈" class="headerlink" title="蓝牙协议栈"></a>蓝牙协议栈</h1><p><strong>如何判断蓝牙协议栈是Bluedroid 还是 Bluez?</strong><br><strong>标准的API无法判断，一个取巧的办法就是判断Bluedroid或bluez是不是有后台进程，然后你判断后台进程是否存在即可。</strong></p><h2 id="Bluez"><a href="#Bluez" class="headerlink" title="Bluez"></a>Bluez</h2><p>Android 4.2之前，Google一直使用的是Linux官方蓝牙协议栈，即知名老牌开源项目BlueZ。</p><p> Linux官方协议栈，该协议栈的上层用Socket封装，便于开发者使用，通过DBUS与其它应用程序<br>通信。</p><p>Bluedroid类似，BlueZ也是按照标准流程从应用一直走下来，不过两者唯一的区别是BlueZ的DBUS。blueDroid中取出DBUS是代码结构变的更加清晰，看起来跟顺畅。</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-797fb8ee072389e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-fbc8607bd6b81e5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="L2CAP协议"><a href="#L2CAP协议" class="headerlink" title="L2CAP协议"></a>L2CAP协议</h3><p>该协议用于数据传输前后的处理，比如数据分段和组装。这是个底层的协议，作用类似于TCP或者UDP，但它用UUID，而不是Port用于server和client的结对</p><h3 id="RFCOMM-1"><a href="#RFCOMM-1" class="headerlink" title="RFCOMM"></a>RFCOMM</h3><p>该协议是串口模拟，把蓝牙接口模拟成串口</p><h3 id="OBEX协议"><a href="#OBEX协议" class="headerlink" title="OBEX协议"></a>OBEX协议</h3><p>这是一个应用层的协议，建立在RFCOMM之上，但它也可以建立在红外协议IrDA和TCP/IP等其他传输协议之上</p><h3 id="SDP协议"><a href="#SDP协议" class="headerlink" title="SDP协议"></a>SDP协议</h3><p>SDP协议用于客户端在远端设备中寻找所需的服务。它与SDDB(Service Discovery Database)有密切联系。SDDB保存该蓝牙设备提供的所有服务(Service Record)，SDP会在SDDB中寻找客户所需的服务并连接之</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UUID在蓝牙接口中的作用类似于TCP/IP的端口号。<a href="http://www.avetana-gmbh.de/avetana-gmbh/produkte/doc/javax/bluetooth/UUID.html" target="_blank" rel="external">UUID列表</a> 列出了一些常用的UUID值</p><hr><h2 id="BlueDroid"><a href="#BlueDroid" class="headerlink" title="BlueDroid"></a>BlueDroid</h2><p>Bluedroid和Bluez相比，有如下优点：<br>层次结构清晰。各个profile对上层接口统一，便于增加新的profile；增加了HAL层，便于移植。<br>去掉了DBus，Framework的Java代码直接调用到Bluedroid的Native代码。</p><p>Bluedroid 整体协议栈架构:</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-2f948193fe919125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><p>Android 4.2中BlueDroid的框架结构图：（Google官方提供）</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-a98f4792910e055c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><p>Android 4.2中的Bluedroid与Android 4.1中的Bluez相比，功能要少，例如不支持AVRCP 1.3</p><p>AVRCP（Audio/Video Remote Control Profile）提供了如下主要功能：<br>通过蓝牙耳机（比如Sony WM600，SBH50）或车载控制台控制手机上音乐播放<br>在蓝牙耳机或车载控制台上显示手机上音乐播放的状态，歌名，歌手等信息<br>在蓝牙耳机或车载控制台上浏览手机上的音乐文件，显示播放列表</p><p>最新的Android 4.3中，Bluedroid和Media Player终于提供了对AVRCP 1.3的支持。</p><p>另外，BlueZ已经支持AVRCP 1.4/1.5，但是还在持续的完善和改进中。</p><p>注：以上提到的蓝牙耳机特指有LCD显示和遥控的蓝牙耳机。</p><p>Enable Bluetooth</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-e258787c9ab80296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>Scan remote devices</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-f64fd09ebb3e4bc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h3><p><strong>A2DP——Advanced Audio Distribution Profile(蓝牙音频数据传输的profile)</strong></p><p>A2DP中定义了两种role: Source and Sink。发送音频流的设备是source，接收音频流的设备是sink，比如手机是source，蓝牙耳机是sink。</p><p>A2DP依赖与传输层协议AVDTP——Audio/Video Distribution Transport Protocol。A2DP还规定了音频的编码格式，其中SBC是必须支持的，可选的格式有MPEG-1, MPEG-2, MPEG-4, AAC and ATRC, 另外也支持厂商扩展的格式，比如高质量的音频编码格式apt-X。</p><p>![Uploading Paste_Image_922287.png . . .]</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-343d7ddd0a89f9e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-263801261bcec92c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;经典蓝牙与低功耗蓝牙的区别&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;规范&quot;&gt;&lt;a href=&quot;#规范&quot; class=&quot;headerlink&quot; title=&quot;规范&quot;&gt;&lt;/a&gt;规范&lt;/h1&gt;&lt;p&gt;作为一种通用的无线通信技术，规范自然是蓝牙技术的核心。蓝牙规范可分为两个层次，如图1所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-aed22569579efecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="学习" scheme="http://lethisis.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="蓝牙" scheme="http://lethisis.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>WeakReference 弱引用与内存泄漏</title>
    <link href="http://lethisis.com/archives/5788d435.html"/>
    <id>http://lethisis.com/archives/5788d435.html</id>
    <published>2017-10-19T02:49:07.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.anthonycr.grant:permissions:1.1.2&apos;</div></pre></td></tr></table></figure><p>版本更新后，作者为了避免内存泄漏，在源码中添加了一个弱引用来存储一个抽象类。</p><p>但在用户有多个权限需要选择的时候，抽象类有时候会被回收。当用户确认权限之后，没有调用到回调函数。</p><h1 id="android内存空间分配"><a href="#android内存空间分配" class="headerlink" title="android内存空间分配"></a>android内存空间分配</h1><blockquote><p>首先, 让我们快速看下Android启动流程. 与众多基于Linux内核的系统类似, 启动系统时, bootloader启动内核和init进程. init进程分裂出更多名为”daemons(守护进程)”的底层的Linux进程, 诸如android debug deamon, USB deamon等. 这些守护进程处理底层硬件相关的接口.</p><p>随后, init进程会启动一个非常有意思的进程—“Zygote”. 顾名思义, 这是一个Android平台的非常基础的进程. 这个进程初始化了第一个VM, 并且预加载了framework和众多App所需要的通用资源. 然后它开启一个Socket接口来监听请求, 根据请求孵化出新的VM来管理新的App进程. 一旦收到新的请求, Zygote会基于自身预先加载的VM来孵化出一个新的VM创建一个新的进程.</p><p>启动Zygote之后, init进程会启动runtime进程. Zygote会孵化出一个超级管理进程—System Server. SystemServer会启动所有系统核心服务, 例如Activity Manager Service, 硬件相关的Service等. 到此, 系统准备好启动它的第一个App进程—Home进程了.</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-29c0ee6ae9953466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="app launch"></p><blockquote><p>当启动一个Android程序时，会启动一个Dalvik VM进程，系统会给它分配固定的内存空间（16M,32M不定），这块内存空间会映射到RAM上某个区域。然后这个Android程序就会运行在这块空间上。Java里会将这块空间分成Stack栈内存和Heap堆内存。stack里存放对象的引用，heap里存放实际对象数据。<br>在程序运行中会创建对象，如果未合理管理内存，比如不及时回收无效空间就会造成内存泄露，严重的话可能导致使用内存超过系统分配内存，即内存溢出OOM，导致程序卡顿甚至直接退出。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-f18af8448ad77696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dalvik的Heap和Stack"></p><p>也就是带有回调函数的对象会放到内存堆中。当然，一般处理内存泄漏都是处理内存堆，这里只是提一下。</p><a id="more"></a><h1 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h1><blockquote><p>在Java里, 当一个对象o被创建时, 它被放在Heap里. 当GC运行的时候, 如果发现没有任何引用指向o, o就会被回收以腾出内存空间. 或者换句话说, 一个对象被回收, 必须满足两个条件: 1)没有任何引用指向它 2)GC被运行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addPendingAction</span><span class="params">(@NonNull String[] permissions,</span></span></div><div class="line"><span class="function"><span class="params">                                            @Nullable PermissionsResultAction action)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line">     action.registerPermissions(permissions);</div><div class="line">     mPendingActions.add(<span class="keyword">new</span> WeakReference&lt;&gt;(action));</div><div class="line"> &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyPermissionsChange</span><span class="params">(@NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] results)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> size = permissions.length;</div><div class="line">    <span class="keyword">if</span> (results.length &lt; size) &#123;</div><div class="line">        size = results.length;</div><div class="line">    &#125;</div><div class="line">    Iterator&lt;WeakReference&lt;PermissionsResultAction&gt;&gt; iterator = mPendingActions.iterator();</div><div class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">        PermissionsResultAction action = iterator.next().get();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; size; n++) &#123;</div><div class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span> || action.onResult(permissions[n], results[n])) &#123;</div><div class="line">                iterator.remove();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; size; n++) &#123;</div><div class="line">        mPendingRequests.remove(permissions[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在源码中执行到这儿的时候，action有时候变成了null 。</p><p>在addPendingAction操作中有PermissionsResultAction（强引用）引用指向，但到notifyPermissionsChange（）的时候PermissionsResultAction依然被系统回收了，回调函数不被执行。</p><p> 这是因为编译器在发现进入while循环之后, PermissionsResultAction已经没有被使用, 所以进行了优化(将其置空).</p><p>写了一段测试代码，对象最后的确被回收了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">      List&lt;WeakReference&lt;PermissionAction&gt;&gt; mPendingActions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">      mPendingActions.add(<span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> PermissionAction()));</div><div class="line"></div><div class="line"></div><div class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">      WeakReference&lt;PermissionAction&gt; actionPermission = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">      Iterator&lt;WeakReference&lt;PermissionAction&gt;&gt; iterator = mPendingActions.iterator();</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(iterator.hasNext())&#123;</div><div class="line">          actionPermission = iterator.next();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">          PermissionAction action = actionPermission.get();</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</div><div class="line">              i++;</div><div class="line">              System.out.println(<span class="string">"Object is alive for "</span> + i + <span class="string">" loops - "</span> + action);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              System.out.println(<span class="string">"Object has been collected."</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><blockquote><ul><li>WeakReference的一个特点是它何时被回收是不可确定的, 因为这是由GC运行的不确定性所确定的. 所以, 一般用weak reference引用的对象是有价值被cache, 而且很容易被重新被构建, 且很消耗内存的对象.</li></ul></blockquote><p>虽然弱引用能让app避免了内存溢出的问题，但也带来了不确定性。</p><p>弱引用可以用于Handler，一般的Handler写法可能会导致内存泄漏。因为非静态的内部类持有外部类的对象，而handler又会由于msg的处理而可能常驻在进程中，在activity或者service destroy后，不能及时被系统回收，导致内存泄漏。<br>建议写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MainActivity&gt; mActivity;</div><div class="line">         </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OuterHandler</span><span class="params">(MainActivity activity)</span> </span>&#123;</div><div class="line">      mActivity = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(activity);</div><div class="line">    &#125;</div><div class="line">         </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      MainActivity activity = mActivity.get();</div><div class="line">      <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// do something...</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile &amp;apos;com.anthonycr.grant:permissions:1.1.2&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;版本更新后，作者为了避免内存泄漏，在源码中添加了一个弱引用来存储一个抽象类。&lt;/p&gt;
&lt;p&gt;但在用户有多个权限需要选择的时候，抽象类有时候会被回收。当用户确认权限之后，没有调用到回调函数。&lt;/p&gt;
&lt;h1 id=&quot;android内存空间分配&quot;&gt;&lt;a href=&quot;#android内存空间分配&quot; class=&quot;headerlink&quot; title=&quot;android内存空间分配&quot;&gt;&lt;/a&gt;android内存空间分配&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先, 让我们快速看下Android启动流程. 与众多基于Linux内核的系统类似, 启动系统时, bootloader启动内核和init进程. init进程分裂出更多名为”daemons(守护进程)”的底层的Linux进程, 诸如android debug deamon, USB deamon等. 这些守护进程处理底层硬件相关的接口.&lt;/p&gt;
&lt;p&gt;随后, init进程会启动一个非常有意思的进程—“Zygote”. 顾名思义, 这是一个Android平台的非常基础的进程. 这个进程初始化了第一个VM, 并且预加载了framework和众多App所需要的通用资源. 然后它开启一个Socket接口来监听请求, 根据请求孵化出新的VM来管理新的App进程. 一旦收到新的请求, Zygote会基于自身预先加载的VM来孵化出一个新的VM创建一个新的进程.&lt;/p&gt;
&lt;p&gt;启动Zygote之后, init进程会启动runtime进程. Zygote会孵化出一个超级管理进程—System Server. SystemServer会启动所有系统核心服务, 例如Activity Manager Service, 硬件相关的Service等. 到此, 系统准备好启动它的第一个App进程—Home进程了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-29c0ee6ae9953466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;app launch&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当启动一个Android程序时，会启动一个Dalvik VM进程，系统会给它分配固定的内存空间（16M,32M不定），这块内存空间会映射到RAM上某个区域。然后这个Android程序就会运行在这块空间上。Java里会将这块空间分成Stack栈内存和Heap堆内存。stack里存放对象的引用，heap里存放实际对象数据。&lt;br&gt;在程序运行中会创建对象，如果未合理管理内存，比如不及时回收无效空间就会造成内存泄露，严重的话可能导致使用内存超过系统分配内存，即内存溢出OOM，导致程序卡顿甚至直接退出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-f18af8448ad77696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;dalvik的Heap和Stack&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是带有回调函数的对象会放到内存堆中。当然，一般处理内存泄漏都是处理内存堆，这里只是提一下。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://lethisis.com/categories/java/"/>
    
    
      <category term="弱引用" scheme="http://lethisis.com/tags/%E5%BC%B1%E5%BC%95%E7%94%A8/"/>
    
      <category term="java" scheme="http://lethisis.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>React学习（一）</title>
    <link href="http://lethisis.com/archives/34039b4c.html"/>
    <id>http://lethisis.com/archives/34039b4c.html</id>
    <published>2017-10-19T02:45:13.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>根据REACT官网的推荐，选择的框架为 React + Redux + wepack + es6 </p><p>架构为MVC（Model-View-Controller）：</p><li>model持有UI要展现的数据（store）</li><br><li>View即UI的展现 （React）</li><br><li>Controller用于控制 (Reducer)</li><hr><h1 id="经典前端目录结构"><a href="#经典前端目录结构" class="headerlink" title="经典前端目录结构"></a>经典前端目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- webapp/               # webapp根目录</div><div class="line">  - src/                # 开发目录</div><div class="line">    + css/              # css资源目录</div><div class="line">    + img/              # webapp图片资源目录</div><div class="line">    - js/               # webapp js&amp;jsx资源目录</div><div class="line">      - components/     # 标准组件存放目录</div><div class="line">          - foo/        # 组件foo</div><div class="line">            + css/      # 组件foo的样式</div><div class="line">            + js/       # 组件foo的逻辑</div><div class="line">            + tmpl/     # 组件foo的模板</div><div class="line">            index.js    # 组件foo的入口</div><div class="line">          + bar/        # 组件bar</div><div class="line">      + lib/            # 第三方纯js库</div><div class="line">      ...               # 根据项目需要任意添加的代码目录</div><div class="line">    + tmpl/             # webapp前端模板资源目录</div><div class="line">    a.html              # webapp入口文件a</div><div class="line">    b.html              # webapp入口文件b</div><div class="line">  - assets/             # 编译输出目录，即发布目录</div><div class="line">    + js/               # 编译输出的js目录</div><div class="line">    + img/              # 编译输出的图片目录</div><div class="line">    + css/              # 编译输出的css目录</div><div class="line">    a.html              # 编译输出的入口a</div><div class="line">    b.html              # 编译处理后的入口b</div><div class="line">  + mock/               # 假数据目录</div><div class="line">  app.js                # 本地server入口</div><div class="line">  routes.js             # 本地路由配置</div><div class="line">  webpack.config.js     # webpack配置文件</div><div class="line">  gulpfile.js           # gulp任务配置</div><div class="line">  package.json          # 项目配置</div><div class="line">  README.md             # 项目说明</div></pre></td></tr></table></figure><a id="more"></a><hr><h1 id="REACT"><a href="#REACT" class="headerlink" title="REACT"></a>REACT</h1><blockquote><p>React 的主要思想是通过构建可复用组件来构建用户界面。所谓组件其实就是 <a href="https://zh.wikipedia.org/zh-cn/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA" target="_blank" rel="external">有限状态机</a>，通过状态渲染对应的界面，且每个组件都有自己的生命周期，它规定了组件的状态和方法需要在哪个阶段进行改变和执行。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-dd0ce0359da5a5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="状态机"></p><p>生命周期：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// react-lifecycle mixin</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDom from &apos;react-dom&apos;;</div><div class="line">import LifeCycle from &apos;react-lifecycle&apos;;</div><div class="line"></div><div class="line">const body = document.body;</div><div class="line"></div><div class="line">const MyComponent = React.createClass(&#123;</div><div class="line">  mixins: [LifeCycle],</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    console.log(&apos;render&apos;);</div><div class="line">    return null;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDom.render(&lt;MyComponent /&gt;, body);</div><div class="line">ReactDom.unmountComponentAtNode(body);</div><div class="line">ReactDom.render(&lt;MyComponent /&gt;, body);</div><div class="line">ReactDom.render(&lt;MyComponent /&gt;, body);</div></pre></td></tr></table></figure></p><blockquote><p>在自定义 React 组件时，根据需要会在组件生命周期的不同阶段实现不同的逻辑。为了查看 组件生命周期的执行顺序，你可以使用 <a href="https://github.com/jasonslyvia/react-lifecycle" target="_blank" rel="external">react-lifecycle mixin</a>，将此 mixin 添加到需要观察的组件中，当任何生命周期方法被调用时，都能在控制台观察到对应的生命周期的调用时状态。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-f2df85a3498a92fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生命周期"></p><hr><h1 id="Redux-数据流"><a href="#Redux-数据流" class="headerlink" title="Redux(数据流)"></a>Redux(数据流)</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><blockquote><p>这个对象就像 “Model”，区别是它并没有 setter（修改器方法）。因此其它的代码不能随意修复它，造成难以复现的 bug。<br>要想更新 state 中的数据，你需要发起一个 action。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  todos: [&#123;</div><div class="line">    text: &apos;Eat food&apos;,</div><div class="line">    completed: true</div><div class="line">  &#125;, &#123;</div><div class="line">    text: &apos;Exercise&apos;,</div><div class="line">    completed: false</div><div class="line">  &#125;],</div><div class="line">  visibilityFilter: &apos;SHOW_COMPLETED&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><blockquote><p>Action 就是一个普通 JavaScript 对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; type: &apos;ADD_TODO&apos;, text: &apos;Go to swimming pool&apos; &#125;</div><div class="line">&#123; type: &apos;TOGGLE_TODO&apos;, index: 1 &#125;</div><div class="line">&#123; type: &apos;SET_VISIBILITY_FILTER&apos;, filter: &apos;SHOW_ALL&apos; &#125;</div></pre></td></tr></table></figure><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><blockquote><p>reducer 只是一个接收 state 和 action，并返回新的 state 的函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = <span class="string">'SHOW_ALL'</span>, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'SET_VISIBILITY_FILTER'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> action.filter;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">    <span class="keyword">return</span> state.concat([&#123; <span class="attr">text</span>: action.text, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]);</div><div class="line">  <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">    <span class="keyword">return</span> state.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></div><div class="line">      action.index === index ?</div><div class="line">        &#123; <span class="attr">text</span>: todo.text, <span class="attr">completed</span>: !todo.completed &#125; :</div><div class="line">        todo</div><div class="line">   )</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><blockquote><p>官网对webpack的定义是MODULE BUNDLER，他的目的就是把有依赖关系的各种文件打包成一系列的静态资源。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-049fe6bef37a2bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>每个项目下都必须配置有一个 webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//插件项</span></div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    <span class="comment">//页面入口文件配置</span></div><div class="line">    entry: &#123;</div><div class="line">        index : <span class="string">'./src/js/page/index.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//入口文件输出配置</span></div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">'dist/js/page'</span>,</div><div class="line">        filename: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="comment">//加载器配置</span></div><div class="line">        loaders: [</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//其它解决方案配置</span></div><div class="line">    resolve: &#123;</div><div class="line">        root: <span class="string">'E:/github/flux-example/src'</span>, <span class="comment">//绝对路径</span></div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        alias: &#123;</div><div class="line">            AppStore : <span class="string">'js/stores/AppStores.js'</span>,</div><div class="line">            ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">            AppAction : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><blockquote><p>ECMAScript 6.0（简称ES6）是JavaScript语言的下一代标准.</p></blockquote><h2 id="Bable"><a href="#Bable" class="headerlink" title="Bable"></a>Bable</h2><blockquote><p>能够实现 ES6 到 ES5 的代码转换多亏了 <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> (以前叫 6to5) 以及 Traceur 之类的项目。这些转换器 (更准确地说是源代码到源代码的编译器) 可以把你写的符合 ECMAScript 6 标准的代码完美地转换为 ECMAScript 5 标准的代码，并且可以确保良好地运行在所有主流 JavaScript 引擎中。</p></blockquote><h2 id="ES6语法例子"><a href="#ES6语法例子" class="headerlink" title="ES6语法例子"></a>ES6语法例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'core-js/shim'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>( name ) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHello() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span>!`</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHelloThreeTimes() &#123;</div><div class="line">    <span class="keyword">let</span> hello = <span class="keyword">this</span>.sayHello();</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123; hello &#125;</span> `</span>.repeat(<span class="number">3</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>参考资料：<br>react<br>    <a href="http://segmentfault.com/a/1190000003940416?utm_source=APP&amp;utm_medium=iOS&amp;utm_campaign=socialShare&amp;from=groupmessage&amp;isappinstalled=1" target="_blank" rel="external">http://segmentfault.com/a/1190000003940416?utm_source=APP&amp;utm_medium=iOS&amp;utm_campaign=socialShare&amp;from=groupmessage&amp;isappinstalled=1</a><br>    <a href="http://top.jobbole.com/15576/" target="_blank" rel="external">http://top.jobbole.com/15576/</a></p><p>react-router<br>    <a href="https://github.com/rackt/react-router" target="_blank" rel="external">https://github.com/rackt/react-router</a></p><p>redux<br>    <a href="http://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">http://camsong.github.io/redux-in-chinese/</a><br>    <a href="https://github.com/rackt/redux" target="_blank" rel="external">https://github.com/rackt/redux</a>         examples</p><p>redux-router<br>    <a href="https://github.com/acdlite/redux-router" target="_blank" rel="external">https://github.com/acdlite/redux-router</a>         examples</p><p>redux-form<br>    <a href="https://github.com/erikras/redux-form" target="_blank" rel="external">https://github.com/erikras/redux-form</a></p><p>babel<br>    es6<br>        <a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/intro</a></p><p>webpack<br>    <a href="http://segmentfault.com/a/1190000003499526" target="_blank" rel="external">http://segmentfault.com/a/1190000003499526</a><br>    <a href="http://segmentfault.com/a/1190000002551952" target="_blank" rel="external">http://segmentfault.com/a/1190000002551952</a><br>    <a href="https://blog.crazycoder.cc/p/react-using-webpack" target="_blank" rel="external">https://blog.crazycoder.cc/p/react-using-webpack</a></p><p>fetch<br>    <a href="http://www.thinksaas.cn/group/topic/396019/" target="_blank" rel="external">http://www.thinksaas.cn/group/topic/396019/</a><br>    <a href="http://www.tuicool.com/articles/QZBJ7zJ" target="_blank" rel="external">http://www.tuicool.com/articles/QZBJ7zJ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h1&gt;&lt;p&gt;根据REACT官网的推荐，选择的框架为 React + Redux + wepack + es6 &lt;/p&gt;
&lt;p&gt;架构为MVC（Model-View-Controller）：&lt;/p&gt;
&lt;li&gt;model持有UI要展现的数据（store）&lt;/li&gt;&lt;br&gt;&lt;li&gt;View即UI的展现 （React）&lt;/li&gt;&lt;br&gt;&lt;li&gt;Controller用于控制 (Reducer)&lt;/li&gt;

&lt;hr&gt;
&lt;h1 id=&quot;经典前端目录结构&quot;&gt;&lt;a href=&quot;#经典前端目录结构&quot; class=&quot;headerlink&quot; title=&quot;经典前端目录结构&quot;&gt;&lt;/a&gt;经典前端目录结构&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- webapp/               # webapp根目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  - src/                # 开发目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + css/              # css资源目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + img/              # webapp图片资源目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - js/               # webapp js&amp;amp;jsx资源目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      - components/     # 标准组件存放目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          - foo/        # 组件foo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            + css/      # 组件foo的样式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            + js/       # 组件foo的逻辑&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            + tmpl/     # 组件foo的模板&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            index.js    # 组件foo的入口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          + bar/        # 组件bar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      + lib/            # 第三方纯js库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ...               # 根据项目需要任意添加的代码目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + tmpl/             # webapp前端模板资源目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.html              # webapp入口文件a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b.html              # webapp入口文件b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  - assets/             # 编译输出目录，即发布目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + js/               # 编译输出的js目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + img/              # 编译输出的图片目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + css/              # 编译输出的css目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.html              # 编译输出的入口a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b.html              # 编译处理后的入口b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  + mock/               # 假数据目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  app.js                # 本地server入口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  routes.js             # 本地路由配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  webpack.config.js     # webpack配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  gulpfile.js           # gulp任务配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  package.json          # 项目配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  README.md             # 项目说明&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="react" scheme="http://lethisis.com/categories/react/"/>
    
    
      <category term="学习" scheme="http://lethisis.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="react" scheme="http://lethisis.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JPUSH(极光) 推送通知栏图标</title>
    <link href="http://lethisis.com/archives/7ff5eb52.html"/>
    <id>http://lethisis.com/archives/7ff5eb52.html</id>
    <published>2017-10-19T02:42:35.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-5-0对状态栏图标的要求"><a href="#Android-5-0对状态栏图标的要求" class="headerlink" title="Android 5.0对状态栏图标的要求"></a>Android 5.0对状态栏图标的要求</h1><p>根据Android5.0相关API，icon必须完全遵循镂空背景和无渐变色的设计。</p><h1 id="极光推送通知栏图标问题"><a href="#极光推送通知栏图标问题" class="headerlink" title="极光推送通知栏图标问题"></a>极光推送通知栏图标问题</h1><p>使用默认通知栏样式的话，如果找不到 <b>jpush_notification_icon.png</b> ,则使用应用的默认图标。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JPushInterface.setDebugMode(<span class="keyword">true</span>); </div><div class="line"><span class="comment">// 设置开启日志,发布时请关闭日志 </span></div><div class="line">JPushInterface.init(<span class="keyword">this</span>); </div><div class="line"><span class="comment">// 初始化 JPush</span></div></pre></td></tr></table></figure></p><p>在使用期间会出现状态栏图标显示不全的问题</p><blockquote><p>参考：<br><a href="https://community.jiguang.cn/t/logo/10361/4" target="_blank" rel="external">https://community.jiguang.cn/t/logo/10361/4</a><br><a href="http://9105034.blog.51cto.com/9095034/1742957" target="_blank" rel="external">http://9105034.blog.51cto.com/9095034/1742957</a></p><p>通知的图标大小<br>drawable-xhdpi 48x48<br>drawable-hdpi 36x36<br>drawable-mdpi 24x24</p></blockquote><a id="more"></a><h1 id="自定义通知栏样式设计"><a href="#自定义通知栏样式设计" class="headerlink" title="自定义通知栏样式设计"></a>自定义通知栏样式设计</h1><h2 id="1-、定制声音、震动、闪灯等-Notification-样式。"><a href="#1-、定制声音、震动、闪灯等-Notification-样式。" class="headerlink" title="1 、定制声音、震动、闪灯等 Notification 样式。"></a>1 、定制声音、震动、闪灯等 Notification 样式。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">BasicPushNotificationBuilder builder = <span class="keyword">new</span> BasicPushNotificationBuilder(MainActivity.<span class="keyword">this</span>);</div><div class="line">builder.statusBarDrawable = R.drawable.jpush_notification_icon;</div><div class="line">builder.notificationFlags = Notification.FLAG_AUTO_CANCEL</div><div class="line">        | Notification.FLAG_SHOW_LIGHTS;  <span class="comment">//设置为自动消失和呼吸灯闪烁</span></div><div class="line">builder.notificationDefaults = Notification.DEFAULT_SOUND</div><div class="line">        | Notification.DEFAULT_VIBRATE</div><div class="line">        | Notification.DEFAULT_LIGHTS;  <span class="comment">// 设置为铃声、震动、呼吸灯闪烁都要</span></div><div class="line">JPushInterface.setPushNotificationBuilder(<span class="number">1</span>, builder);</div></pre></td></tr></table></figure><h2 id="2、定制-Notification-的-Layout"><a href="#2、定制-Notification-的-Layout" class="headerlink" title="2、定制 Notification 的 Layout"></a>2、定制 Notification 的 Layout</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CustomPushNotificationBuilder builder = <span class="keyword">new</span></div><div class="line">CustomPushNotificationBuilder(MainActivity.<span class="keyword">this</span>,</div><div class="line">                          R.layout.customer_notitfication_layout,</div><div class="line">                          R.id.icon,</div><div class="line">                          R.id.title,</div><div class="line">                          R.id.text); </div><div class="line">                         <span class="comment">// 指定定制的 Notification Layout</span></div><div class="line">builder.statusBarDrawable = R.drawable.your_notification_icon;     </div><div class="line"><span class="comment">// 指定最顶层状态栏小图标</span></div><div class="line">builder.layoutIconDrawable = R.drawable.your_2_notification_icon;  </div><div class="line"><span class="comment">// 指定下拉状态栏时显示的通知图标</span></div><div class="line">JPushInterface.setPushNotificationBuilder(<span class="number">2</span>, builder);</div></pre></td></tr></table></figure><p>使用自定义通知栏样式的有条件的<br>客户端需设置消息的类型，即builderId ，当服务端发送对应的类型时，极光会先进行消息类型匹配，若匹配不上，则默认调用应用的图标，若匹配上，则调用客户端指定的图标（自定义通知栏的指定图标）。</p><p>现在服务端为极光后台，无法设置builderId，因此app无法自定义状态栏，无法自定义状态栏的图标以及下拉状态栏的图标。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-5-0对状态栏图标的要求&quot;&gt;&lt;a href=&quot;#Android-5-0对状态栏图标的要求&quot; class=&quot;headerlink&quot; title=&quot;Android 5.0对状态栏图标的要求&quot;&gt;&lt;/a&gt;Android 5.0对状态栏图标的要求&lt;/h1&gt;&lt;p&gt;根据Android5.0相关API，icon必须完全遵循镂空背景和无渐变色的设计。&lt;/p&gt;
&lt;h1 id=&quot;极光推送通知栏图标问题&quot;&gt;&lt;a href=&quot;#极光推送通知栏图标问题&quot; class=&quot;headerlink&quot; title=&quot;极光推送通知栏图标问题&quot;&gt;&lt;/a&gt;极光推送通知栏图标问题&lt;/h1&gt;&lt;p&gt;使用默认通知栏样式的话，如果找不到 &lt;b&gt;jpush_notification_icon.png&lt;/b&gt; ,则使用应用的默认图标。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;JPushInterface.setDebugMode(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;); 	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置开启日志,发布时请关闭日志 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JPushInterface.init(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); 		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始化 JPush&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在使用期间会出现状态栏图标显示不全的问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://community.jiguang.cn/t/logo/10361/4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://community.jiguang.cn/t/logo/10361/4&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://9105034.blog.51cto.com/9095034/1742957&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://9105034.blog.51cto.com/9095034/1742957&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通知的图标大小&lt;br&gt;drawable-xhdpi 48x48&lt;br&gt;drawable-hdpi 36x36&lt;br&gt;drawable-mdpi 24x24&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="推送" scheme="http://lethisis.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>ViewDragHelper理解</title>
    <link href="http://lethisis.com/archives/4ea27d37.html"/>
    <id>http://lethisis.com/archives/4ea27d37.html</id>
    <published>2017-10-19T02:37:19.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>public class ViewDragHelper extends <a href="https://developer.android.com/reference/java/lang/Object.html" target="_blank" rel="external">Object</a><br><a href="https://developer.android.com/reference/java/lang/Object.html" target="_blank" rel="external">java.lang.Object</a><br>   ↳<br>android.support.v4.widget.ViewDragHelper</code></p><hr><h1 id="ViewDragHelper是什么？"><a href="#ViewDragHelper是什么？" class="headerlink" title="ViewDragHelper是什么？"></a>ViewDragHelper是什么？</h1><p>官方的解释：</p><blockquote><p>ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number of useful operations and state tracking for allowing a user to drag and reposition views within their parent ViewGroup.</p></blockquote><pre><code>ViewDragHelper是编写自定义ViewGroups一个实用工具类。它定义了一组有用的操作和状态追踪，允许用户在父ViewGroup中拖动并且重新定位子View（child view）。</code></pre><ol><br><li>ViewDragHelper.Callback是连接ViewDragHelper与view之间的桥梁（这个view一般是指拥子view的容器即parentView）；</li><br> <li>  ViewDragHelper的实例是通过静态工厂方法创建的；</li><br> <li>能够指定拖动的方向；</li><br> <li> ViewDragHelper可以检测到是否触及到边缘；</li><br>  <li> ViewDragHelper并不是直接作用于要被拖动的View，而是使其控制的视图容器中的子View可以被拖动，如果要指定某个子view的行为，需要在Callback中想办法；</li><br>  <li> ViewDragHelper的本质其实是分析onInterceptTouchEvent和onTouchEvent的MotionEvent参数，然后根据分析的结果去改变一个容器中被拖动子View的位置（ 通过offsetTopAndBottom(int offset)和offsetLeftAndRight(int offset)方法 ），他能在触摸的时候判断当前拖动的是哪个子View；</li><br>   <li>ViewDragHelper的实例方法 ViewDragHelper create(ViewGroup forParent, Callback cb) 可以指定一个被ViewDragHelper处理拖动事件的对象 。</li><br></ol><a id="more"></a><h1 id="ViewDragHelper-Callback-ViewDragHelper与View之间的桥梁"><a href="#ViewDragHelper-Callback-ViewDragHelper与View之间的桥梁" class="headerlink" title="ViewDragHelper.Callback(ViewDragHelper与View之间的桥梁)"></a>ViewDragHelper.Callback(ViewDragHelper与View之间的桥梁)</h1><p><code>public static abstract class ViewDragHelper.Callback<br>extends <a href="https://developer.android.com/reference/java/lang/Object.html" target="_blank" rel="external">Object</a><br><a href="https://developer.android.com/reference/java/lang/Object.html" target="_blank" rel="external">java.lang.Object</a><br>   ↳<br>android.support.v4.widget.ViewDragHelper.Callback</code></p><p>官网简介：</p><blockquote><p>A Callback is used as a communication channel with the ViewDragHelper back to the parent view using it. on*<br>methods are invoked on significant events and several accessor methods are expected to provide the ViewDragHelper with more information about the state of the parent view upon request. The callback also makes decisions governing the range and draggability of child views.</p></blockquote><pre><code>Callback是连接ViewDragHelper与parentView之间的桥梁。方法在重要的事件中被调用，几个访问方法会提供给ViewDragHelper更多关于parentView的状态信息。Callback同时也决定了拖动的范围和子view的拖动能力。</code></pre><p><br></p><h1 id="为什么要使用ViewDragHelper"><a href="#为什么要使用ViewDragHelper" class="headerlink" title="为什么要使用ViewDragHelper"></a>为什么要使用ViewDragHelper</h1><blockquote><p>ViewDragHelper解决了android中手势处理过于复杂的问题，在DrawerLayout出现之前，侧滑菜单都是由第三方开源代码实现的，其中著名的当属 <a href="http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0310/1589.html" target="_blank" rel="external">MenuDrawer</a> ，MenuDrawer重写onTouchEvent方法来实现侧滑效果，代码量很大，实现逻辑也需要很大的耐心才能看懂。如果每个开发人员都从这么原始的步奏开始做起，那对于安卓生态是相当不利的。所以说ViewDragHelper等的出现反映了安卓开发框架已经开始向成熟的方向迈进。</p></blockquote><h1 id="ViewDragHelper实例"><a href="#ViewDragHelper实例" class="headerlink" title="ViewDragHelper实例"></a>ViewDragHelper实例</h1><blockquote><p>根据开源项目<a href="https://github.com/xmuSistone/android-card-slide-panel&quot;cardSlide&quot;" target="_blank" rel="external">android-card-slide-panel</a> 简化</p></blockquote><p>创建自定义的ViewGroup</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardSlidePanel</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewDragHelper mViewDragHelper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CardSlidePanel</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CardSlidePanel</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CardSlidePanel</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">        <span class="comment">// 滑动相关类</span></div><div class="line">        mViewDragHelper = ViewDragHelper</div><div class="line">                .create(<span class="keyword">this</span>, <span class="number">10f</span>, <span class="keyword">new</span> DragHelperCallback());</div><div class="line">        mViewDragHelper.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="keyword">int</span> maxWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> maxHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        setMeasuredDimension(</div><div class="line">                resolveSizeAndState(maxWidth, widthMeasureSpec, <span class="number">0</span>),</div><div class="line">                resolveSizeAndState(maxHeight, heightMeasureSpec, <span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> t, <span class="keyword">int</span> right, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> mTotalHeight = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 遍历所有子视图</span></div><div class="line">        <span class="keyword">int</span> childCount = getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line"></div><div class="line">            <span class="comment">// 获取在onMeasure中计算的视图尺寸</span></div><div class="line">            <span class="keyword">int</span> measureHeight = childView.getMeasuredHeight();</div><div class="line">            <span class="keyword">int</span> measuredWidth = childView.getMeasuredWidth();</div><div class="line"></div><div class="line">            childView.layout(left, mTotalHeight, measuredWidth, mTotalHeight + measureHeight);</div><div class="line"></div><div class="line">            mTotalHeight += measureHeight;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mViewDragHelper.shouldInterceptTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        mViewDragHelper.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 这是viewdraghelper拖拽效果的主要逻辑</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DragHelperCallback</span> <span class="keyword">extends</span> <span class="title">ViewDragHelper</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top,</span></span></div><div class="line"><span class="function"><span class="params">                                          <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">256</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> top;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建布局文件layout_drag.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#fff"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">org.lethisis.weather.weatherl.ui.widget.cardslide.CardSlidePanel</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/image_slide_panel"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimaryDark"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/card_bottom_layout"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/card_left_btn"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span> /&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span> /&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/card_right_btn"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">org.lethisis.weather.weatherl.ui.widget.cardslide.CardItemView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"@dimen/card_image_width"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">org.lethisis.weather.weatherl.ui.widget.cardslide.CardItemView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"@dimen/card_image_width"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">org.lethisis.weather.weatherl.ui.widget.cardslide.CardItemView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"@dimen/card_image_width"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">org.lethisis.weather.weatherl.ui.widget.cardslide.CardItemView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"@dimen/card_image_width"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">org.lethisis.weather.weatherl.ui.widget.cardslide.CardSlidePanel</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure><p>【待续】</p><p>参考：<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0911/1680.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0911/1680.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;public class ViewDragHelper extends &lt;a href=&quot;https://developer.android.com/reference/java/lang/Object.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Object&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/java/lang/Object.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java.lang.Object&lt;/a&gt;&lt;br&gt;   ↳&lt;br&gt;android.support.v4.widget.ViewDragHelper&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;ViewDragHelper是什么？&quot;&gt;&lt;a href=&quot;#ViewDragHelper是什么？&quot; class=&quot;headerlink&quot; title=&quot;ViewDragHelper是什么？&quot;&gt;&lt;/a&gt;ViewDragHelper是什么？&lt;/h1&gt;&lt;p&gt;官方的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number of useful operations and state tracking for allowing a user to drag and reposition views within their parent ViewGroup.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ViewDragHelper是编写自定义ViewGroups一个实用工具类。

它定义了一组有用的操作和状态追踪，允许用户在父ViewGroup中拖动并且重新定位子View（child view）。
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt;ViewDragHelper.Callback是连接ViewDragHelper与view之间的桥梁（这个view一般是指拥子view的容器即parentView）；&lt;/li&gt;&lt;br&gt; &lt;li&gt;  ViewDragHelper的实例是通过静态工厂方法创建的；&lt;/li&gt;&lt;br&gt; &lt;li&gt;能够指定拖动的方向；&lt;/li&gt;&lt;br&gt; &lt;li&gt; ViewDragHelper可以检测到是否触及到边缘；&lt;/li&gt;&lt;br&gt;  &lt;li&gt; ViewDragHelper并不是直接作用于要被拖动的View，而是使其控制的视图容器中的子View可以被拖动，如果要指定某个子view的行为，需要在Callback中想办法；&lt;/li&gt;&lt;br&gt;  &lt;li&gt; ViewDragHelper的本质其实是分析onInterceptTouchEvent和onTouchEvent的MotionEvent参数，然后根据分析的结果去改变一个容器中被拖动子View的位置（ 通过offsetTopAndBottom(int offset)和offsetLeftAndRight(int offset)方法 ），他能在触摸的时候判断当前拖动的是哪个子View；&lt;/li&gt;&lt;br&gt;   &lt;li&gt;ViewDragHelper的实例方法 ViewDragHelper create(ViewGroup forParent, Callback cb) 可以指定一个被ViewDragHelper处理拖动事件的对象 。&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="ViewDragHelper" scheme="http://lethisis.com/tags/ViewDragHelper/"/>
    
  </entry>
  
  <entry>
    <title>android 内存泄漏(OOM)问题总结</title>
    <link href="http://lethisis.com/archives/686fcfd3.html"/>
    <id>http://lethisis.com/archives/686fcfd3.html</id>
    <published>2017-10-19T02:29:45.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于Java来说，就是new出来的Object 放在Heap上无法被GC回收<br><img src="http://upload-images.jianshu.io/upload_images/1760285-97e1705c7d3796a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h1 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h1><p><img src="http://upload-images.jianshu.io/upload_images/1760285-c5b166399c1683ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Context"></p><blockquote><p>Context类本身是一个纯abstract类，它有两个具体的实现子类：ContextImpl和ContextWrapper。</p></blockquote><p>Context数量=Activity数量+Service数量+进程数</p><blockquote><p>Activity Context被传递到其他实例中，这可能导致自身被引用而发生泄漏</p></blockquote><p>尽可能地使用application context ，除非是Dialog这种必须使用activity context的情况，其他情况都使用application context，这样能避免实例不被回收导致的内存泄漏。</p><a id="more"></a><hr><h1 id="InnerClass匿名内部类（Handler）"><a href="#InnerClass匿名内部类（Handler）" class="headerlink" title="InnerClass匿名内部类（Handler）"></a>InnerClass匿名内部类（Handler）</h1><p>以Handler为例。引用关系链是Looper -&gt; MessageQueue -&gt; Message -&gt; Handler -&gt; Activity。<br>当activity destory之后，消息处理有可能还没执行，这样就导致消息的处理常驻在内存当中，不能被回收。<br>避免这种情况：<br>1、执行remove Handler消息队列中的消息与runnable对象。<br>2、使用static + WeakReference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private static class OuterHandler extends Handler &#123;</div><div class="line">    private final WeakReference&lt;MainActivity&gt; mActivity;</div><div class="line"></div><div class="line">    public OuterHandler(MainActivity activity) &#123;</div><div class="line">      mActivity = new WeakReference&lt;MainActivity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">      MainActivity activity = mActivity.get();</div><div class="line">      if (activity != null) &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><hr><h1 id="Webview"><a href="#Webview" class="headerlink" title="Webview"></a>Webview</h1><p>标准的WebView存在内存泄露的问题 <a href="https://code.google.com/p/android/issues/detail?id=5067" target="_blank" rel="external">https://code.google.com/p/android/issues/detail?id=5067</a></p><p>android 4.4之前是webkit内核，android4.4之后就用chromium内核了</p><h2 id="1、通常根治这个问题的办法是为WebView开启另外一个进程，通过AIDL与主进程进行通信，WebView所在的进程可以根据业务的需要选择合适的时机进行销毁，从而达到内存的完整释放。因为webview引发的-资源无法释放等问题-全部可以解决。"><a href="#1、通常根治这个问题的办法是为WebView开启另外一个进程，通过AIDL与主进程进行通信，WebView所在的进程可以根据业务的需要选择合适的时机进行销毁，从而达到内存的完整释放。因为webview引发的-资源无法释放等问题-全部可以解决。" class="headerlink" title="1、通常根治这个问题的办法是为WebView开启另外一个进程，通过AIDL与主进程进行通信，WebView所在的进程可以根据业务的需要选择合适的时机进行销毁，从而达到内存的完整释放。因为webview引发的 资源无法释放等问题 全部可以解决。"></a>1、通常根治这个问题的办法是为WebView开启另外一个进程，通过AIDL与主进程进行通信，WebView所在的进程可以根据业务的需要选择合适的时机进行销毁，从而达到内存的完整释放。因为webview引发的 资源无法释放等问题 全部可以解决。</h2><h2 id="2、使用Crosswalk-lite-或者-Cordova-webview代替"><a href="#2、使用Crosswalk-lite-或者-Cordova-webview代替" class="headerlink" title="2、使用Crosswalk-lite  或者 Cordova webview代替"></a>2、使用Crosswalk-lite  或者 Cordova webview代替</h2><h2 id="3、用个反射，自己关掉"><a href="#3、用个反射，自己关掉" class="headerlink" title="3、用个反射，自己关掉"></a>3、用个反射，自己关掉</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigCallback</span><span class="params">(WindowManager windowManager)</span> </span>&#123;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        Field field = WebView.class.getDeclaredField(<span class="string">"mWebViewCore"</span>);  </div><div class="line">        field = field.getType().getDeclaredField(<span class="string">"mBrowserFrame"</span>);  </div><div class="line">        field = field.getType().getDeclaredField(<span class="string">"sConfigCallback"</span>);  </div><div class="line">        field.setAccessible(<span class="keyword">true</span>);  </div><div class="line">        Object configCallback = field.get(<span class="keyword">null</span>);  </div><div class="line">   </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == configCallback) &#123;  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">   </div><div class="line">        field = field.getType().getDeclaredField(<span class="string">"mWindowManager"</span>);  </div><div class="line">        field.setAccessible(<span class="keyword">true</span>);  </div><div class="line">        field.set(configCallback, windowManager);  </div><div class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">    setConfigCallback((WindowManager)getApplicationContext().getSystemService(Context.WINDOW_SERVICE));  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">    setConfigCallback(<span class="keyword">null</span>);  </div><div class="line">    <span class="keyword">super</span>.onDestroy();  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺点是，这个方法是依赖android.webkit implementation，android4.4之后就用chromium内核了，也就是4.4之后这个方法就不适用了。</p><h2 id="4、WebView-动态加载"><a href="#4、WebView-动态加载" class="headerlink" title="4、WebView 动态加载"></a>4、WebView 动态加载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WebView      mWebView = <span class="keyword">new</span> WebView(getApplicationgContext());  </div><div class="line">LinearLayout mll      = findViewById(R.id.xxx);  </div><div class="line">mll.addView(mWebView);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">      <span class="keyword">super</span>.onDestroy();  </div><div class="line">      mWebView.removeAllViews();  </div><div class="line">      mWebView.destroy()  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>第四种方法，如果你需要在WebView中打开链接或者你打开的页面带有flash，获得你的WebView想弹出一个dialog，都会导致从ApplicationContext到ActivityContext的强制类型转换错误，从而导致你应用崩溃。这是因为在加载flash的时候，系统会首先把你的WebView作为父控件，然后在该控件上绘制flash，他想找一个Activity的Context来绘制他，但是你传入的是ApplicationContext。</p></blockquote><hr><blockquote><p>在Chromium WebView的实现中，因为WebView不是基于SurfaceView类的（因为历史遗留问题），所以，绘制内容到画布上必须在主线程来操作。当从有WebView的Activity退出到没有WebView的Activity，但是这个时候这个Activity需要绘制bitmap，就会造成崩溃：ELG绘制错误。<br>建议：尽量少使用getContext()，而使用getApplicationContext()来代替。</p></blockquote><hr><h1 id="AnimationDrawable"><a href="#AnimationDrawable" class="headerlink" title="AnimationDrawable"></a>AnimationDrawable</h1><p>在使用帧动画的时候，检测到oom问题。原来帧动画会一次性加载所需要的图片，如果一次性加载10多张就会发生内存泄漏问题。</p><blockquote><p>Looking at the source code for AnimationDrawable, it appears to load all of the frames into memory at once, which it would basically have to do for good performance.</p></blockquote><h2 id="1、try-to-add-largeHeap-true-in-your-application-tag-of-your-manifest-or-try-using-small-size-image"><a href="#1、try-to-add-largeHeap-true-in-your-application-tag-of-your-manifest-or-try-using-small-size-image" class="headerlink" title="1、try to add largeHeap=true in your application tag of your manifest.or try using small size image."></a>1、try to add largeHeap=true in your application tag of your manifest.or try using small size image.</h2><h2 id="2、分布式加载。"><a href="#2、分布式加载。" class="headerlink" title="2、分布式加载。"></a>2、分布式加载。</h2><p>更改了一下网上的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadingImageView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_START = <span class="number">0x01</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_STOP = <span class="number">0x02</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_STOP = <span class="number">0xf3</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_RUNNING = <span class="number">0xf4</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> SimpleDraweeView mImageView;</div><div class="line">    <span class="keyword">private</span> Timer mTimer = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> AnimTimerTask mTimeTask = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mState = STATE_RUNNING;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mResourceIdList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">            R.drawable.mangocity_loading_img1,</div><div class="line">            R.drawable.mangocity_loading_img2,</div><div class="line">            R.drawable.mangocity_loading_img3,</div><div class="line">            R.drawable.mangocity_loading_img4,</div><div class="line">            R.drawable.mangocity_loading_img5,</div><div class="line">            R.drawable.mangocity_loading_img6,</div><div class="line">            R.drawable.mangocity_loading_img7,</div><div class="line">            R.drawable.mangocity_loading_img8,</div><div class="line">            R.drawable.mangocity_loading_img9,</div><div class="line">            R.drawable.mangocity_loading_img10,</div><div class="line">            R.drawable.mangocity_loading_img11,</div><div class="line">            R.drawable.mangocity_loading_img12</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/* 记录播放位置*/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mFrameIndex = <span class="number">0</span>;</div><div class="line">    <span class="comment">/* 播放形式*/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLooping = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WeakHandler AnimHanlder;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadingImageView</span><span class="params">(SimpleDraweeView imageView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mImageView = imageView;</div><div class="line">        <span class="keyword">this</span>.mTimer = <span class="keyword">new</span> Timer();</div><div class="line">        <span class="keyword">this</span>.mTimeTask = <span class="keyword">new</span> AnimTimerTask();</div><div class="line">        AnimHanlder = <span class="keyword">new</span> WeakHandler(callback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 开始播放动画</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> loop     时候循环播放</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> duration 动画播放时间间隔</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">boolean</span> loop, <span class="keyword">long</span> duration)</span> </span>&#123;</div><div class="line">        stop();</div><div class="line">        isLooping = loop;</div><div class="line">        mFrameIndex = <span class="number">0</span>;</div><div class="line">        mState = STATE_RUNNING;</div><div class="line">        mTimeTask = <span class="keyword">new</span> AnimTimerTask();</div><div class="line">        mTimer.schedule(mTimeTask, <span class="number">0</span>, duration);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 停止动画播放</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mTimeTask != <span class="keyword">null</span>) &#123;</div><div class="line">            mFrameIndex = <span class="number">0</span>;</div><div class="line">            mState = STATE_STOP;</div><div class="line">            mTimer.purge();</div><div class="line">            mTimeTask.cancel();</div><div class="line">            mTimeTask = <span class="keyword">null</span>;</div><div class="line">            mImageView.setImageURI(resourceToUri(<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 定时器任务</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AnimTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mFrameIndex &lt; <span class="number">0</span> || mState == STATE_STOP) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mFrameIndex &lt; mResourceIdList.length) &#123;</div><div class="line">                Message msg = AnimHanlder.obtainMessage(MSG_START, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">                msg.sendToTarget();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mFrameIndex = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (!isLooping) &#123;</div><div class="line">                    Message msg = AnimHanlder.obtainMessage(MSG_STOP, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">                    msg.sendToTarget();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler.Callback callback = <span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MSG_START: &#123;</div><div class="line">                    <span class="keyword">if</span> (mFrameIndex &gt;= <span class="number">0</span> &amp;&amp; mFrameIndex &lt; mResourceIdList.length &amp;&amp; mState == STATE_RUNNING) &#123;</div><div class="line">                        mImageView.setImageURI(resourceToUri(mResourceIdList[mFrameIndex]));</div><div class="line">                        mFrameIndex++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MSG_STOP: &#123;</div><div class="line">                    <span class="keyword">if</span> (mTimeTask != <span class="keyword">null</span>) &#123;</div><div class="line">                        mFrameIndex = <span class="number">0</span>;</div><div class="line">                        mTimer.purge();</div><div class="line">                        mTimeTask.cancel();</div><div class="line">                        mState = STATE_STOP;</div><div class="line">                        mTimeTask = <span class="keyword">null</span>;</div><div class="line">                        mImageView.setImageURI(resourceToUri(<span class="number">0</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Uri <span class="title">resourceToUri</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Uri.Builder()</div><div class="line">                .scheme(UriUtil.LOCAL_RESOURCE_SCHEME) <span class="comment">// "res"</span></div><div class="line">                .path(String.valueOf(resId))</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="Html-for"><a href="#Html-for" class="headerlink" title="Html.for"></a>Html.for</h1><p>当使用textview加载富文本的时候，涉及到bitmap的加载，过程当中可能会发生OOM</p><p>移步：<a href="http://www.jianshu.com/p/9d6e0bdfcf0e" target="_blank" rel="external">http://www.jianshu.com/p/9d6e0bdfcf0e</a></p><hr><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><blockquote><p>因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏，在Android中应该谨慎使用static对象。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1760285-86d883e635087038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><h1 id="singleton-单例模式"><a href="#singleton-单例模式" class="headerlink" title="singleton(单例模式)"></a>singleton(单例模式)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是一个非线性安全的单例，instance为静态对象，其生命周期与application的生命周期一致，当application销毁的时候才被回收。假如是activity持有instance这个对象，当activity destroy之后，instance还是会常驻在内存当中，并不会被回收，这样就会导致了内存泄漏的问题出现。</p><hr><h1 id="shareSDK"><a href="#shareSDK" class="headerlink" title="shareSDK"></a>shareSDK</h1><p>常常会忽略<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ShareSDK.stopSDK();</div></pre></td></tr></table></figure></p><hr><h1 id="Enum-枚举"><a href="#Enum-枚举" class="headerlink" title="Enum(枚举)"></a>Enum(枚举)</h1><blockquote><p>“Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.”</p></blockquote><p>枚举通常要求的是静态常量的两倍多的内存。应该严格避免在Android上使用枚举</p><p>Android 提供了注解来优化枚举，使用方法如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-5f9f7c1e71400eb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><h1 id="Cursor，Stream没有close，View没有recyle"><a href="#Cursor，Stream没有close，View没有recyle" class="headerlink" title="Cursor，Stream没有close，View没有recyle"></a>Cursor，Stream没有close，View没有recyle</h1><p>在View中调用reset()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mHasRecyled) &#123;            </div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">    SubAreaShell.recycle(mActionBtnShell);</div><div class="line">    mActionBtnShell = <span class="keyword">null</span>;</div><div class="line">...</div><div class="line">    mIsDoingAvatartRedPocketAnim = <span class="keyword">false</span>;        </div><div class="line">    <span class="keyword">if</span> (mAvatarArea != <span class="keyword">null</span>) &#123;</div><div class="line">            mAvatarArea.reset();</div><div class="line">    &#125;        </div><div class="line">    <span class="keyword">if</span> (mNickNameArea != <span class="keyword">null</span>) &#123;</div><div class="line">        mNickNameArea.reset();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>在程序中我们经常会进行查询数据库的操作，但时常会存在不小心使用Cursor之后没有及时关闭的情况。这些Cursor的泄露，反复多次出现的话会对内存管理产生很大的负面影响，我们需要谨记对Cursor对象的及时关闭。</p></blockquote><hr><h1 id="注册监听器的泄漏"><a href="#注册监听器的泄漏" class="headerlink" title="注册监听器的泄漏"></a>注册监听器的泄漏</h1><blockquote><p>在Android程序里面存在很多需要register与unregister的监听器，我们需要确保在合适的时候及时unregister那些监听器。自己手动add的listener，需要记得及时remove这个listener。</p></blockquote><hr><h1 id="集合中对象没清理造成的内存泄漏"><a href="#集合中对象没清理造成的内存泄漏" class="headerlink" title="集合中对象没清理造成的内存泄漏"></a>集合中对象没清理造成的内存泄漏</h1><blockquote><p>通常把一些对象的引用加入到了集合容器（比如ArrayList）中，当我们不需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。如果这个集合是static的话，那情况就更严重了。<br>所以要在退出程序之前，将集合里的东西clear，然后置为null，再退出程序。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;EmotionPanelInfo&gt; data;    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestory</span><span class="params">()</span> </span>&#123;        </div><div class="line">    <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">        data.clear();</div><div class="line">        data = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="Drawable"><a href="#Drawable" class="headerlink" title="Drawable"></a>Drawable</h1><blockquote><p>2.3的系统，把drawable添加到缓存容器，因为drawable与View的强应用，很容易导致activity发生泄漏。而从4.0开始，就不存在这个问题。解决这个问题，需要对2.3系统上的缓存drawable做特殊封装，处理引用解绑的问题，避免泄漏的情况。</p></blockquote><p>Drawable.Callback引起的内存泄漏<br>Drawable对象持有Drawable.callback的引用。当把一个Drawable对象设置到一个View时，Drawable对象会持有该View的引用作为Drawable.Callback</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-e81ce2828d168398.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>避免Drawable.Callback引起内存泄漏<br>•   尽量不要在static成员中保存Drawable对象<br>•   对于需要保存的Drawable对象， 在需要时调用Drawable#setCallback(null).</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-9510c311bda7cba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><blockquote><p>该问题主要产生在 4.0 以前，因为在 2.3.7 及以下版本 Drawable 的 setCallback 方法的实现是直接赋值，而从 4.0.1 开始，setCallback 采用了弱引用处理这个问题，避免了内存泄露问题。</p></blockquote><hr><h1 id="AlertDialog-造成的内存泄露"><a href="#AlertDialog-造成的内存泄露" class="headerlink" title="AlertDialog 造成的内存泄露"></a>AlertDialog 造成的内存泄露</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</div><div class="line">    .setPositiveButton(<span class="string">"Baguette"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">      MyActivity.<span class="keyword">this</span>.makeBread();</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">    .show();</div></pre></td></tr></table></figure><blockquote><p>DialogInterface.OnClickListener 的匿名实现类持有了 MainActivity 的引用；</p><p>而在 AlertDialog 的实现中，OnClickListener 类将被包装在一个 Message 对象中（具体可以看 AlertController 类的 setButton 方法），而且这个 Message 会在其内部被复制一份（AlertController 类的 mButtonHandler 中可以看到），两份 Message 中只有一个被 recycle，另一个（OnClickListener 的成员变量引用的 Message 对象）将会泄露！</p><p>解决办法：</p><p>Android 5.0 以上不存在此问题；<br>Message 对象的泄漏无法避免，但是如果仅仅是一个空的 Message 对象，将被放入对象池作为后用，是没有问题的；<br>让 DialogInterface.OnClickListener 对象不持有外部类的强引用，如用 static 类实现；<br>在 Activity 退出前 dismiss dialog!</p></blockquote><hr><h1 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h1><blockquote><p>首先，Android对Bitmap内存(像素数据)的分配区域在不同版本上是有区分的：</p><p>As of Android 3.0 (API level 11), the pixel data is stored on the Dalvik heap along with the associated bitmap.</p></blockquote><p>详情见<a href="http://developer.android.com/training/displaying-bitmaps/manage-memory.html" target="_blank" rel="external">Managing Bitmap Memory</a></p><p>从3.0开始，Bitmap像素数据和Bitmap对象一起存放在Dalvik堆中，而在3.0之前，Bitmap像素数据存放在Native内存中。<br>所以，在3.0之前，Bitmap像素数据在Nativie内存的释放是不确定的，容易内存溢出而Crash，官方强烈建议调用recycle()（当然是在确定不需要的时候）；而在3.0之后，则无此要求。</p><blockquote><p>首先强调一点，加载图片属于耗时操作请放到非 UI 线程进行！</p><p>Android 中加载图片时一般是按每像素占 4 byte 来处理的，拿计算器算一下可以发现，如果原封不动的加载一张图片是非常占内存的！因此非常容易 OOM。<br>Bitmap是一个极容易消耗内存的大胖子，减小创建出来的Bitmap的内存占用是很重要的，通常来说有下面2个措施：使用对象池和缩放 Bitmap。</p></blockquote><p>•  对象池</p><blockquote><p>在启动时预先申请一块内存给对象池使用。加载图片时根据特定算法(LRU)，从对象池中找到要淘汰的 Bitmap 对象，将其内存腾出来给新图片用，这样每次加载图片也不用去向 JVM 申请内存，也避免了启动 GC 来腾出内存，可以有效防止内存抖动，提升加载效率。</p><p>在 Android 中可以让 BitmapOption 的 inBitmap 属性指向当前某个已创建的 Bitmap 对象，后续在解码时传入这个 option 就可以复用这个 Bitmap 对象的内存空间（要求两者像素格式必须一样，例如都是 ARGB8888。也可以按像素格式创建不同的对象来复用）。</p><p>注意，这个 inBitmap 参数在 API 11-18 时，后续要解码的图片大小必须和当前这个 Bitmap 一模一样，才能复用，否则后面的图片就无法复用了。在 API 19 以后就没这个限制了，只要后续 Bitmap 大小小于等于要复用的 Bitmap 即可。</p></blockquote><p>inBitmap</p><p>BitmapFactory.Options.inBitmap是Android3.0新增的一个属性，如果设置了这个属性则会重用这个Bitmap的内存从而提升性能。<br>但是这个重用是有条件的，在Android4.4之前只能重用相同大小的Bitmap，Android4.4+则只要比重用Bitmap小即可。</p><p>•  缩放 Bitmap</p><p>createScaledBitmap() 传入指定宽高即可，该方法缺陷是需要传入一个已经加载完毕的 Bitmap 图片。。。都加载完了还要你干嘛？</p><p>inSampleSize。该值只能是 2 的倍数或者 1。原理是解码时根据这个值，如果是 1，就记录每一个像素的值。如果值为 2，Android 就从每 4 个像素中取出两个像素记录下来。<br>如果我们需要缩放的倍数不是 2 的倍数，即 inSampleSize 满足不了需求时，可以考虑设置 </p><p>BitmapOption 的 inScaled 为 true，同时设置 inDensity 和 inTargetDensity 属性，这样就可以指定想要的 Bitmap 为原来的任意分之一大小了。该算法很复杂，如果原图较大，那么缩放加载时可能会耗时较长。可以和 inSampleSize 结合使用，用 inSampleSize 缩放，减小大小后，再用这个方法缩放 。</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-8ff773a47d52cb79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</p><blockquote><p>参考：<br><a href="http://www.jianshu.com/p/5bb8c01e2bc7" target="_blank" rel="external">http://www.jianshu.com/p/5bb8c01e2bc7</a><br><a href="http://blog.csdn.net/yaphetzhao/article/details/48521581" target="_blank" rel="external">http://blog.csdn.net/yaphetzhao/article/details/48521581</a><br>郭霖的<a href="http://blog.csdn.net/guolin_blog/article/details/42238633" target="_blank" rel="external">分析内存的使用</a><br>胡凯大大<a href="http://hukai.me/android-performance-oom/" target="_blank" rel="external">内存优化之OOM</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Java来说，就是new出来的Object 放在Heap上无法被GC回收&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-97e1705c7d3796a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Context&quot;&gt;&lt;a href=&quot;#Context&quot; class=&quot;headerlink&quot; title=&quot;Context&quot;&gt;&lt;/a&gt;Context&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-c5b166399c1683ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Context&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Context类本身是一个纯abstract类，它有两个具体的实现子类：ContextImpl和ContextWrapper。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Context数量=Activity数量+Service数量+进程数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activity Context被传递到其他实例中，这可能导致自身被引用而发生泄漏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽可能地使用application context ，除非是Dialog这种必须使用activity context的情况，其他情况都使用application context，这样能避免实例不被回收导致的内存泄漏。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="OOM" scheme="http://lethisis.com/tags/OOM/"/>
    
  </entry>
  
  <entry>
    <title>Android N Signature Scheme v2 渠道打包</title>
    <link href="http://lethisis.com/archives/99e7619d.html"/>
    <id>http://lethisis.com/archives/99e7619d.html</id>
    <published>2017-10-19T02:22:59.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="APK-signature-scheme-v2（官网如是说）"><a href="#APK-signature-scheme-v2（官网如是说）" class="headerlink" title="APK signature scheme v2（官网如是说）"></a>APK signature scheme v2（官网如是说）</h1><p>Android 7.0 引入一项新的应用签名方案 APK Signature Scheme v2，它能提供更快的应用安装时间和更多针对未授权 APK 文件更改的保护。在默认情况下，Android Studio 2.2 和 Android Plugin for Gradle 2.2 会使用 APK Signature Scheme v2 和传统签名方案来签署您的应用。<br>虽然我们建议您对您的应用采用 APK Signature Scheme v2，但这项新方案并非强制性的。如果您的应用在使用 APK Signature Scheme v2 时不能正确开发，您可以停用这项新方案。禁用过程会导致 Android Studio 2.2 和 Android Plugin for Gradle 2.2 仅使用传统签名方案来签署您的应用。要仅用传统方案签署，打开模块级 build.gradle<br> 文件，然后将行 v2SigningEnabled false<br> 添加到您的版本签名配置中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  defaultConfig &#123; ... &#125;</div><div class="line">  signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">      <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"myreleasekey.keystore"</span>)</span></span></div><div class="line"><span class="function">      storePassword "password"</span></div><div class="line"><span class="function">      keyAlias "MyReleaseKey"</span></div><div class="line"><span class="function">      keyPassword "password"</span></div><div class="line"><span class="function">      v2SigningEnabled <span class="keyword">false</span></span></div><div class="line"><span class="function">    &#125;</span></div><div class="line"><span class="function">  &#125;</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure></p><p><strong>注意：</strong>如果您使用 APK Signature Scheme v2 签署您的应用，并对应用进行了进一步更改，则应用的签名将无效。出于这个原因，请在使用 APK Signature Scheme v2 签署您的应用之前、而非之后使用 zipalign<br> 等工具。<br>如需了解详细信息，请阅读相关的 Android Studio 文档，这些文档介绍了如何在 Android Studio 中<a href="https://developer.android.google.cn/studio/publish/app-signing.html#release-mode" target="_blank" rel="external">签署应用</a>以及如何使用 Android Plugin for Gradle <a href="https://developer.android.google.cn/studio/build/build-variants.html#signing" target="_blank" rel="external">为签署应用配置构建文件</a>。</p><p>android studio2.3的正式版之后，正式启用了V2的签名方式</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-bab03593e98cd41b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>使用v2方式打包，7.0以下安装失败。<br>使用v1方式打包，7.0以及7.0以下的版本都没问题。</p><blockquote><p>结论：单独使用V2签名的apk是不能在小于7.0的手机上安装的，会出现签名证书找不到的情况，为了防止出现这种情况，AS使用了可以同时选择两种签名方式<br>即：7.0以下使用V1的签名方式，7.0以后的就使用V2的签名方式</p></blockquote><a id="more"></a><h1 id="APK文件格式"><a href="#APK文件格式" class="headerlink" title="APK文件格式"></a>APK文件格式</h1><p> apk 本身是个 zip 格式, 格式可以参考<a href="http://blog.sina.com.cn/s/blog_4c3591bd0100zzm6.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4c3591bd0100zzm6.html</a>.</p><p><img src="http://upload-images.jianshu.io/upload_images/1760285-921c3ce1f143ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><blockquote><p>新的签名方案会在ZIP文件格式的 Central Directory 区块所在文件位置的前面添加一个APK Signing Block区块，下面按照ZIP文件的格式来分析新应用签名方案签名后的APK包。</p></blockquote><p>整个APK（ZIP文件格式）会被分为以下四个区块：</p><p>Contents of ZIP entries（from offset 0 until the start of APK Signing Block）<br>APK Signing Block<br>ZIP Central Directory<br>ZIP End of Central Directory</p><blockquote><p>新应用签名方案的签名信息会被保存在区块2（APK Signing Block）中， 而区块1（Contents of ZIP entries）、区块3（ZIP Central Directory）、区块4（ZIP End of Central Directory）是受保护的，在签名后任何对区块1、3、4的修改都逃不过新的应用签名方案的检查。</p></blockquote><p>这样的话，之前的美团打包方案就会有问题。<br><a href="http://www.jianshu.com/p/ef186125dac4" target="_blank" rel="external">http://www.jianshu.com/p/ef186125dac4</a></p><p>新的应用签名方案下META-INF已经被列入了保护区了，向META-INF添加空文件的方案会对区块1、3、4都会有影响，新应用签名方案签署的应用经过我们旧的生成渠道包方案处理后，在安装时会报以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES: </div><div class="line">Failed to collect certificates from base.apk: META-INF/CERT.SF indicates base.apk is signed using APK Signature Scheme v2, </div><div class="line">but no such signature was found. Signature stripped?]</div></pre></td></tr></table></figure><h1 id="多渠道打包解决方案"><a href="#多渠道打包解决方案" class="headerlink" title="多渠道打包解决方案"></a>多渠道打包解决方案</h1><h2 id="1-、往APK中添加ZIP-Comment"><a href="#1-、往APK中添加ZIP-Comment" class="headerlink" title="1 、往APK中添加ZIP Comment"></a>1 、往APK中添加ZIP Comment</h2><p>这种方法是根据zip格式核心目录的内容注释(Comment)做处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">End of central directory record </div><div class="line"></div><div class="line">OffsetBytesDescription</div><div class="line">04End of central directory signature = 0x06054b50核心目录结束标记（0x06054b50）</div><div class="line">42Number of this disk当前磁盘编号</div><div class="line">62Disk where central directory starts核心目录开始位置的磁盘编号</div><div class="line">82Number of central directory records on this disk该磁盘上所记录的核心目录数量</div><div class="line">102Total number of central directory records该磁盘上所记录的核心目录数量</div><div class="line">124Size of central directory (bytes)核心目录的大小</div><div class="line">164Offset of start of central directory, relative to start of archive核心目录开始位置相对于archive开始的位移</div><div class="line">202Comment length (n)注释长度 (n)</div><div class="line">22nComment注释内容</div></pre></td></tr></table></figure><blockquote><p>apk 默认情况下没有comment，所以 comment length的short 两个字节为 0，我们需要把这个值修改为我们的comment的长度，然后把comment追加到后边即可。</p></blockquote><p>在gradle 中通过如下方式 disable scheme v2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">        v2SigningEnabled <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-、美团第一代打包工具walle"><a href="#2-、美团第一代打包工具walle" class="headerlink" title="2 、美团第一代打包工具walle"></a>2 、美团第一代打包工具<a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="external">walle</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/1760285-7bbc4cb3b5c89714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>通过上图可以看出新的应用签名方案的验证过程：</p><blockquote><p>寻找APK Signing Block，如果能够找到，则进行验证，验证成功则继续进行安装，如果失败了则终止安装<br>如果未找到APK Signing Block，则执行原来的签名验证机制，也是验证成功则继续进行安装，如果失败了则终止安装</p></blockquote><p>美团通过在APK Signing Block中扩展ID-VALUE来实现渠道包。<br>因为在源码当中，只存在一个ID-VALUE的判断<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (id == APK_SIGNATURE_SCHEME_V2_BLOCK_ID) &#123;<span class="keyword">return</span> getByteBuffer(pairs, len - <span class="number">4</span>);&#125;</div></pre></td></tr></table></figure></p><p>而这个区域的其它 ID-VALUE 是被忽略的。<br>将渠道号放到里面，打包的时候就能绕过验证。</p><blockquote><p>到这里为止一个新的渠道包生成方案逐步清晰了起来，下面是新一代渠道包生成工具的描述：</p><p>对新的应用签名方案生成的APK包中的ID-value进行扩展，提供自定义ID－value（渠道信息），并保存在APK中<br>而APK在安装过程中进行的签名校验，是忽略我们添加的这个ID-value的，这样就能正常安装了<br>在App运行阶段，可以通过ZIP的EOCD（End of central directory）、Central directory等结构中的信息（会涉及ZIP格式的相关知识，这里不做展开描述）找到我们自己添加的ID-value，从而实现获取渠道信息的功能</p><p>参考：<br><a href="http://tech.meituan.com/android-apk-v2-signature-scheme.html" target="_blank" rel="external">http://tech.meituan.com/android-apk-v2-signature-scheme.html</a><br><a href="http://www.jianshu.com/p/a6e7a01c6cad" target="_blank" rel="external">http://www.jianshu.com/p/a6e7a01c6cad</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;APK-signature-scheme-v2（官网如是说）&quot;&gt;&lt;a href=&quot;#APK-signature-scheme-v2（官网如是说）&quot; class=&quot;headerlink&quot; title=&quot;APK signature scheme v2（官网如是说）&quot;&gt;&lt;/a&gt;APK signature scheme v2（官网如是说）&lt;/h1&gt;&lt;p&gt;Android 7.0 引入一项新的应用签名方案 APK Signature Scheme v2，它能提供更快的应用安装时间和更多针对未授权 APK 文件更改的保护。在默认情况下，Android Studio 2.2 和 Android Plugin for Gradle 2.2 会使用 APK Signature Scheme v2 和传统签名方案来签署您的应用。&lt;br&gt;虽然我们建议您对您的应用采用 APK Signature Scheme v2，但这项新方案并非强制性的。如果您的应用在使用 APK Signature Scheme v2 时不能正确开发，您可以停用这项新方案。禁用过程会导致 Android Studio 2.2 和 Android Plugin for Gradle 2.2 仅使用传统签名方案来签署您的应用。要仅用传统方案签署，打开模块级 build.gradle&lt;br&gt; 文件，然后将行 v2SigningEnabled false&lt;br&gt; 添加到您的版本签名配置中：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  defaultConfig &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  signingConfigs &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    release &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;storeFile &lt;span class=&quot;title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;myreleasekey.keystore&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;      storePassword &quot;password&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;      keyAlias &quot;MyReleaseKey&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;      keyPassword &quot;password&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;      v2SigningEnabled &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果您使用 APK Signature Scheme v2 签署您的应用，并对应用进行了进一步更改，则应用的签名将无效。出于这个原因，请在使用 APK Signature Scheme v2 签署您的应用之前、而非之后使用 zipalign&lt;br&gt; 等工具。&lt;br&gt;如需了解详细信息，请阅读相关的 Android Studio 文档，这些文档介绍了如何在 Android Studio 中&lt;a href=&quot;https://developer.android.google.cn/studio/publish/app-signing.html#release-mode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;签署应用&lt;/a&gt;以及如何使用 Android Plugin for Gradle &lt;a href=&quot;https://developer.android.google.cn/studio/build/build-variants.html#signing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为签署应用配置构建文件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;android studio2.3的正式版之后，正式启用了V2的签名方式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1760285-bab03593e98cd41b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用v2方式打包，7.0以下安装失败。&lt;br&gt;使用v1方式打包，7.0以及7.0以下的版本都没问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结论：单独使用V2签名的apk是不能在小于7.0的手机上安装的，会出现签名证书找不到的情况，为了防止出现这种情况，AS使用了可以同时选择两种签名方式&lt;br&gt;即：7.0以下使用V1的签名方式，7.0以后的就使用V2的签名方式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="打包" scheme="http://lethisis.com/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="android N" scheme="http://lethisis.com/tags/android-N/"/>
    
  </entry>
  
  <entry>
    <title>setSpan 冲突问题</title>
    <link href="http://lethisis.com/archives/84bb15ba.html"/>
    <id>http://lethisis.com/archives/84bb15ba.html</id>
    <published>2017-10-16T10:12:38.000Z</published>
    <updated>2017-10-31T02:20:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中要求做几个链接，点击跳转到不同的h5页面. 根据效果图，决定使用富文本做。<br>先贴修改后的代码：</p><p>自定义一个ClickableSpan<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUrlSpan</span> <span class="keyword">extends</span> <span class="title">ClickableSpan</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomUrlSpan</span><span class="params">( String url, String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(ContextUtils.getContext(), WebViewActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        intent.putExtra(Constant.WEB_URL, url);</div><div class="line">        intent.putExtra(Constant.WEB_TITLE,title);</div><div class="line">        ContextUtils.getContext().startActivity(intent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据不同的航班，拼接不同的协议文本放到textview</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">stringBuffer.append(<span class="string">"已阅读并同意&lt;a href='"</span> + HttpServiceConstants.FLIGHT_AIRPORT_AGREEN_CONSIGN_URL + <span class="string">"' &gt; "</span> + getActivity().getString(R.string.frm_flight_order_protocol) + <span class="string">" &lt;/a&gt;"</span>);</div><div class="line">String dot = <span class="string">"&lt;font color='"</span> + ContextCompat.getColor(ContextUtils.getContext(), R.color.txt_blue) + <span class="string">"'&gt; 、 &lt;/font&gt;"</span>;</div><div class="line">stringBuffer.append(dot).append(<span class="string">"&lt;a href='"</span> + Constant.WEB_URL_BATTERY + <span class="string">"' &gt; "</span> + getActivity().getString(R.string.frm_flight_order_protocol_battery) + <span class="string">" &lt;/a&gt;"</span>);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">flightCabinselTravelBinding.tvFlightProtocol.setText(HtmlUtil.fromHtml(stringBuffer.toString()));</div><div class="line">     flightCabinselTravelBinding.tvFlightProtocol.setMovementMethod(<span class="keyword">new</span> FixedLinkMovementMethod());</div><div class="line"></div><div class="line"></div><div class="line">     CharSequence text = flightCabinselTravelBinding.tvFlightProtocol.getText();</div><div class="line">     <span class="keyword">int</span> end = text.length();</div><div class="line">     Spannable spannable = (Spannable) text;</div><div class="line">     URLSpan[] urlSpans = spannable.getSpans(<span class="number">0</span>, end, URLSpan.class);</div><div class="line">     <span class="keyword">if</span> (urlSpans.length == <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(text);</div><div class="line"></div><div class="line"></div><div class="line">     <span class="comment">// 循环遍历并拦截 所有http://开头的链接</span></div><div class="line">     <span class="keyword">for</span> (URLSpan uri : urlSpans) &#123;</div><div class="line">         <span class="keyword">final</span> String url = uri.getURL();</div><div class="line">         <span class="keyword">if</span> (url.indexOf(<span class="string">"http"</span>) == <span class="number">0</span>) &#123;</div><div class="line">             CustomUrlSpan customUrlSpan = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">             <span class="comment">//托运协议</span></div><div class="line">             <span class="keyword">if</span> (url.equals(HttpServiceConstants.FLIGHT_AIRPORT_AGREEN_CONSIGN_URL)) &#123;</div><div class="line">                 customUrlSpan = <span class="keyword">new</span> CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol));</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="comment">//西部</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (url.equals(Constant.WEB_URL_WEST)) &#123;</div><div class="line"></div><div class="line">                 customUrlSpan = <span class="keyword">new</span> CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol_west));</div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="comment">//深圳航空</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (url.equals(Constant.WEB_URL_SZ)) &#123;</div><div class="line"></div><div class="line">                 customUrlSpan = <span class="keyword">new</span> CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol_sz));</div><div class="line"></div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="comment">//锂电池及危险品须知</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (url.equals(Constant.WEB_URL_BATTERY)) &#123;</div><div class="line"></div><div class="line">                 customUrlSpan = <span class="keyword">new</span> CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol_battery));</div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (customUrlSpan != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                 <span class="comment">// The original URLSpan needs to be removed to block the behavior of browser opening</span></div><div class="line">                 spannableStringBuilder.removeSpan(uri);</div><div class="line"></div><div class="line">                 spannableStringBuilder.setSpan(CharacterStyle.wrap(customUrlSpan), spannable.getSpanStart(uri),</div><div class="line">                         spannable.getSpanEnd(uri), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line"></div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line"></div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     flightCabinselTravelBinding.tvFlightProtocol.setText(spannableStringBuilder);</div></pre></td></tr></table></figure><h1 id="开发过程中遇到的问题："><a href="#开发过程中遇到的问题：" class="headerlink" title="开发过程中遇到的问题："></a>开发过程中遇到的问题：</h1><p>1、点击文字链接跳转到了系统自带浏览器当中，CustomUrlSpan的点击事件并没有执行</p><p>2、在webviewActivity中打开链接，返回退出该富文本页面。再次进入，更改后的协议文本拼接没错，但textView展示出来的文本还是之前的文本，并没有根据拼接内容而改变。</p><hr><h2 id="问题1-解决："><a href="#问题1-解决：" class="headerlink" title="问题1 解决："></a>问题1 解决：</h2><p>setSpan 的时候，需要先去掉原本的UrlSpan ,阻止链接在系统的浏览器打开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The original URLSpan needs to be removed to block the behavior of browser opening</span></div><div class="line">spannableStringBuilder.removeSpan(uri);</div></pre></td></tr></table></figure></p><h2 id="问题2-解决："><a href="#问题2-解决：" class="headerlink" title="问题2 解决："></a>问题2 解决：</h2><p>先要了解  <b>LinkMovementMethod</b> 、 <b>SpannableStringBuilder</b>、<b>CharacterStyle.wrap()</b></p><h4 id="LinkMovementMethod"><a href="#LinkMovementMethod" class="headerlink" title="LinkMovementMethod"></a>LinkMovementMethod</h4><blockquote><p>A movement method that traverses links in the text buffer and scrolls if necessary. Supports clicking on links with DPad Center or Enter.</p></blockquote><p>简单来说，就是让链接与滚动生效。</p><p>富文本的点击事件会分发到这个对象里面，那么我们可以在onTouchEvent()中来处理这个点击事件。<br>代码中过滤出了ClickableSpan，执行click事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedLinkMovementMethod</span> <span class="keyword">extends</span> <span class="title">LinkMovementMethod</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(TextView widget, Spannable buffer, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> action = event.getAction();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP ||</div><div class="line">                action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line"></div><div class="line">            x -= widget.getTotalPaddingLeft();</div><div class="line">            y -= widget.getTotalPaddingTop();</div><div class="line"></div><div class="line">            x += widget.getScrollX();</div><div class="line">            y += widget.getScrollY();</div><div class="line"></div><div class="line">            Layout layout = widget.getLayout();</div><div class="line">            <span class="keyword">int</span> line = layout.getLineForVertical(y);</div><div class="line">            <span class="keyword">int</span> off = layout.getOffsetForHorizontal(line, x);</div><div class="line"></div><div class="line">            CharacterStyle[] candidates = buffer.getSpans(off, off, CharacterStyle.class);</div><div class="line"></div><div class="line">            ClickableSpan clickableSpan = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (CharacterStyle characterStyle : candidates) &#123;</div><div class="line">                <span class="keyword">if</span> (characterStyle.getUnderlying() <span class="keyword">instanceof</span> ClickableSpan) &#123;</div><div class="line">                    clickableSpan = (ClickableSpan) characterStyle.getUnderlying();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (clickableSpan != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</div><div class="line">                    clickableSpan.onClick(widget);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                    Selection.setSelection(buffer,</div><div class="line">                            buffer.getSpanStart(clickableSpan),</div><div class="line">                            buffer.getSpanEnd(clickableSpan));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Selection.removeSelection(buffer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(widget, buffer, event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="SpannableStringBuilder"><a href="#SpannableStringBuilder" class="headerlink" title="SpannableStringBuilder"></a>SpannableStringBuilder</h4><blockquote><p>You can’t reuse the same span multiple times. Even if the span is exactly the same, you need to create a unique span for each section of the string you are wanting to change.</p></blockquote><p>不要多次重复使用相同的span , 最好创建一个唯一的span，避免出现之前的span被改变。</p><blockquote><p>When you pass same span by setSpan method, it will check if spans array have same one and replace old start and end value by news.</p></blockquote><p>当使用setSpan方法的时候，方法中会判断是否存在一个相同的spans array ，start 到 end 的值会被最新的替换。</p><p>也就是说，复用span的话，之前的span可能会被最新的span改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* package */</span> <span class="function"><span class="keyword">void</span> <span class="title">setSpan</span><span class="params">(Object what, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (spans[i] == what) &#123;</div><div class="line">        <span class="keyword">int</span> ostart = mSpanStarts[i];</div><div class="line">        <span class="keyword">int</span> oend = mSpanEnds[i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ostart &gt; mGapStart)</div><div class="line">            ostart -= mGapLength;</div><div class="line">        <span class="keyword">if</span> (oend &gt; mGapStart)</div><div class="line">            oend -= mGapLength;</div><div class="line"></div><div class="line">        mSpanStarts[i] = start;</div><div class="line">        mSpanEnds[i] = end;</div><div class="line">        mSpanFlags[i] = flags;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (send) sendSpanChanged(what, ostart, oend, nstart, nend);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="CharacterStyle-wrap"><a href="#CharacterStyle-wrap" class="headerlink" title="CharacterStyle.wrap()"></a>CharacterStyle.wrap()</h4><blockquote><p>CharacterStyle是个抽象类，字符级别的Span都需要继承这个类<br>CharacterStyle拥有很多子类（BackgroundColorSpan，ClickableSpan，ImageSpan，TypefaceSpan等）<br>一个CharacterStyle类型的Span只能给一个Spaned片段使用，如果想这个Span给多个片段使用可以使用wrap方法。<br>其实就是复制了一个CharacterStyle。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CharacterStyle <span class="title">wrap</span><span class="params">(CharacterStyle cs)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> MetricAffectingSpan) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MetricAffectingSpan.Passthrough((MetricAffectingSpan) cs);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Passthrough(cs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>if you use CharacterStyle.wrap() your span is no longer a ClickableSpan instance, but a CharacterStyle.Passthrough instance instead. Therefore getSpans() does not return it anymore and it’s no longer clickable.</p></blockquote><p>如果使用了CharacterStyle.wrap() ， 那么span不会是一个ClickableSpan ，也就是说点击事件会失效。</p><blockquote><p>A given CharacterStyle can only applied to a single region of a given Spanned. If you need to attach the same CharacterStyle to multiple regions, you can use this method to wrap it with a new object that will have the same effect but be a distinct object so that it can also be attached without conflict.</p></blockquote><p>有多个片段的时候使用，解决attached的冲突问题。</p><hr><p>原来如此，是因为没有使用CharacterStyle.wrap()而导致的问题。最后再自定义一个LinkMovementMethod处理click事件，问题就解决了。</p><blockquote><p>参考<br><a href="http://stackoverflow.com/questions/29505622/spannablestringbuilder-set-clickablespan-more-than-once-cant-click" target="_blank" rel="external">http://stackoverflow.com/questions/29505622/spannablestringbuilder-set-clickablespan-more-than-once-cant-click</a><br><a href="http://stackoverflow.com/questions/13118278/why-cant-use-the-same-span-object-to-setspan-above-twice" target="_blank" rel="external">http://stackoverflow.com/questions/13118278/why-cant-use-the-same-span-object-to-setspan-above-twice</a><br><a href="http://stackoverflow.com/questions/20077457/spannablestring-changes-color-first-time-but-not-when-reused" target="_blank" rel="external">http://stackoverflow.com/questions/20077457/spannablestring-changes-color-first-time-but-not-when-reused</a><br><a href="http://www.jianshu.com/p/be0d79b9d5e6" target="_blank" rel="external">http://www.jianshu.com/p/be0d79b9d5e6</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中要求做几个链接，点击跳转到不同的h5页面. 根据效果图，决定使用富文本做。&lt;br&gt;先贴修改后的代码：&lt;/p&gt;
&lt;p&gt;自定义一个ClickableSpan&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomUrlSpan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClickableSpan&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String url;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String title;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomUrlSpan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( String url, String title)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url = url;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.title = title;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View widget)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(ContextUtils.getContext(), WebViewActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        intent.putExtra(Constant.WEB_URL, url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        intent.putExtra(Constant.WEB_TITLE,title);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ContextUtils.getContext().startActivity(intent);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据不同的航班，拼接不同的协议文本放到textview&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://lethisis.com/categories/android/"/>
    
    
      <category term="Android" scheme="http://lethisis.com/tags/Android/"/>
    
      <category term="span" scheme="http://lethisis.com/tags/span/"/>
    
  </entry>
  
</feed>
