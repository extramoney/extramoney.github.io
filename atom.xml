<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AChan&#39;s Notes</title>
  
  <subtitle>Code &amp; Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lethisis.com/"/>
  <updated>2017-10-18T05:53:57.000Z</updated>
  <id>http://www.lethisis.com/</id>
  
  <author>
    <name>achan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>setSpan 冲突问题</title>
    <link href="http://www.lethisis.com/2017/10/16/setSpan-%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <id>http://www.lethisis.com/2017/10/16/setSpan-冲突问题/</id>
    <published>2017-10-16T10:12:38.000Z</published>
    <updated>2017-10-18T05:53:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考<br><a href="http://stackoverflow.com/questions/29505622/spannablestringbuilder-set-clickablespan-more-than-once-cant-click" target="_blank" rel="external">http://stackoverflow.com/questions/29505622/spannablestringbuilder-set-clickablespan-more-than-once-cant-click</a><br><a href="http://stackoverflow.com/questions/13118278/why-cant-use-the-same-span-object-to-setspan-above-twice" target="_blank" rel="external">http://stackoverflow.com/questions/13118278/why-cant-use-the-same-span-object-to-setspan-above-twice</a><br><a href="http://stackoverflow.com/questions/20077457/spannablestring-changes-color-first-time-but-not-when-reused" target="_blank" rel="external">http://stackoverflow.com/questions/20077457/spannablestring-changes-color-first-time-but-not-when-reused</a><br><a href="http://www.jianshu.com/p/be0d79b9d5e6" target="_blank" rel="external">http://www.jianshu.com/p/be0d79b9d5e6</a></p></blockquote><p>项目中要求做几个链接，点击跳转到不同的h5页面. 根据效果图，决定使用富文本做。<br>先贴修改后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class Person</div><div class="line">include ActiveModel :: Conversion</div></pre></td></tr></table></figure><p>自定义一个ClickableSpan<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class CustomUrlSpan extends ClickableSpan &#123;</div><div class="line"></div><div class="line">    private String url;</div><div class="line">    private String title;</div><div class="line"></div><div class="line"></div><div class="line">    public CustomUrlSpan( String url, String title) &#123;</div><div class="line">        this.url = url;</div><div class="line">        this.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View widget) &#123;</div><div class="line"></div><div class="line">        Intent intent = new Intent(ContextUtils.getContext(), WebViewActivity.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        intent.putExtra(Constant.WEB_URL, url);</div><div class="line">        intent.putExtra(Constant.WEB_TITLE,title);</div><div class="line">        ContextUtils.getContext().startActivity(intent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据不同的航班，拼接不同的协议文本放到textview</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">StringBuffer stringBuffer = new StringBuffer();</div><div class="line">stringBuffer.append(&quot;已阅读并同意&lt;a href=&apos;&quot; + HttpServiceConstants.FLIGHT_AIRPORT_AGREEN_CONSIGN_URL + &quot;&apos; &gt; &quot; + getActivity().getString(R.string.frm_flight_order_protocol) + &quot; &lt;/a&gt;&quot;);</div><div class="line">String dot = &quot;&lt;font color=&apos;&quot; + ContextCompat.getColor(ContextUtils.getContext(), R.color.txt_blue) + &quot;&apos;&gt; 、 &lt;/font&gt;&quot;;</div><div class="line">stringBuffer.append(dot).append(&quot;&lt;a href=&apos;&quot; + Constant.WEB_URL_BATTERY + &quot;&apos; &gt; &quot; + getActivity().getString(R.string.frm_flight_order_protocol_battery) + &quot; &lt;/a&gt;&quot;);</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">flightCabinselTravelBinding.tvFlightProtocol.setText(HtmlUtil.fromHtml(stringBuffer.toString()));</div><div class="line">     flightCabinselTravelBinding.tvFlightProtocol.setMovementMethod(new FixedLinkMovementMethod());</div><div class="line"></div><div class="line"></div><div class="line">     CharSequence text = flightCabinselTravelBinding.tvFlightProtocol.getText();</div><div class="line">     int end = text.length();</div><div class="line">     Spannable spannable = (Spannable) text;</div><div class="line">     URLSpan[] urlSpans = spannable.getSpans(0, end, URLSpan.class);</div><div class="line">     if (urlSpans.length == 0) &#123;</div><div class="line">         return;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(text);</div><div class="line"></div><div class="line"></div><div class="line">     // 循环遍历并拦截 所有http://开头的链接</div><div class="line">     for (URLSpan uri : urlSpans) &#123;</div><div class="line">         final String url = uri.getURL();</div><div class="line">         if (url.indexOf(&quot;http&quot;) == 0) &#123;</div><div class="line">             CustomUrlSpan customUrlSpan = null;</div><div class="line"></div><div class="line">             //托运协议</div><div class="line">             if (url.equals(HttpServiceConstants.FLIGHT_AIRPORT_AGREEN_CONSIGN_URL)) &#123;</div><div class="line">                 customUrlSpan = new CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol));</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             //西部</div><div class="line">             else if (url.equals(Constant.WEB_URL_WEST)) &#123;</div><div class="line"></div><div class="line">                 customUrlSpan = new CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol_west));</div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">             //深圳航空</div><div class="line">             else if (url.equals(Constant.WEB_URL_SZ)) &#123;</div><div class="line"></div><div class="line">                 customUrlSpan = new CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol_sz));</div><div class="line"></div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">             //锂电池及危险品须知</div><div class="line">             else if (url.equals(Constant.WEB_URL_BATTERY)) &#123;</div><div class="line"></div><div class="line">                 customUrlSpan = new CustomUrlSpan(url, getActivity().getString(R.string.frm_flight_order_protocol_battery));</div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">             if (customUrlSpan != null) &#123;</div><div class="line"></div><div class="line">                 // The original URLSpan needs to be removed to block the behavior of browser opening</div><div class="line">                 spannableStringBuilder.removeSpan(uri);</div><div class="line"></div><div class="line">                 spannableStringBuilder.setSpan(CharacterStyle.wrap(customUrlSpan), spannable.getSpanStart(uri),</div><div class="line">                         spannable.getSpanEnd(uri), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line"></div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line"></div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     flightCabinselTravelBinding.tvFlightProtocol.setText(spannableStringBuilder);</div></pre></td></tr></table></figure><p>#开发过程中遇到的问题：</p><p>1、点击文字链接跳转到了系统自带浏览器当中，CustomUrlSpan的点击事件并没有执行</p><p>2、在webviewActivity中打开链接，返回退出该富文本页面。再次进入，更改后的协议文本拼接没错，但textView展示出来的文本还是之前的文本，并没有根据拼接内容而改变。</p><hr><p>#####问题1 解决：</p><p>setSpan 的时候，需要先去掉原本的UrlSpan ,阻止链接在系统的浏览器打开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// The original URLSpan needs to be removed to block the behavior of browser opening</div><div class="line">spannableStringBuilder.removeSpan(uri);</div></pre></td></tr></table></figure></p><p>#####问题2 解决：</p><p>先要了解  <b>LinkMovementMethod</b> 、 <b>SpannableStringBuilder</b>、<b>CharacterStyle.wrap()</b></p><p>#LinkMovementMethod</p><blockquote><p>A movement method that traverses links in the text buffer and scrolls if necessary. Supports clicking on links with DPad Center or Enter.</p></blockquote><p>简单来说，就是让链接与滚动生效。</p><p>富文本的点击事件会分发到这个对象里面，那么我们可以在onTouchEvent()中来处理这个点击事件。<br>代码中过滤出了ClickableSpan，执行click事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class FixedLinkMovementMethod extends LinkMovementMethod &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) &#123;</div><div class="line">        int action = event.getAction();</div><div class="line"></div><div class="line">        if (action == MotionEvent.ACTION_UP ||</div><div class="line">                action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            int x = (int) event.getX();</div><div class="line">            int y = (int) event.getY();</div><div class="line"></div><div class="line">            x -= widget.getTotalPaddingLeft();</div><div class="line">            y -= widget.getTotalPaddingTop();</div><div class="line"></div><div class="line">            x += widget.getScrollX();</div><div class="line">            y += widget.getScrollY();</div><div class="line"></div><div class="line">            Layout layout = widget.getLayout();</div><div class="line">            int line = layout.getLineForVertical(y);</div><div class="line">            int off = layout.getOffsetForHorizontal(line, x);</div><div class="line"></div><div class="line">            CharacterStyle[] candidates = buffer.getSpans(off, off, CharacterStyle.class);</div><div class="line"></div><div class="line">            ClickableSpan clickableSpan = null;</div><div class="line"></div><div class="line">            for (CharacterStyle characterStyle : candidates) &#123;</div><div class="line">                if (characterStyle.getUnderlying() instanceof ClickableSpan) &#123;</div><div class="line">                    clickableSpan = (ClickableSpan) characterStyle.getUnderlying();</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (clickableSpan != null) &#123;</div><div class="line">                if (action == MotionEvent.ACTION_UP) &#123;</div><div class="line">                    clickableSpan.onClick(widget);</div><div class="line">                &#125; else if (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                    Selection.setSelection(buffer,</div><div class="line">                            buffer.getSpanStart(clickableSpan),</div><div class="line">                            buffer.getSpanEnd(clickableSpan));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                return true;</div><div class="line">            &#125; else &#123;</div><div class="line">                Selection.removeSelection(buffer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return super.onTouchEvent(widget, buffer, event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#SpannableStringBuilder</p><blockquote><p>You can’t reuse the same span multiple times. Even if the span is exactly the same, you need to create a unique span for each section of the string you are wanting to change.</p></blockquote><p>不要多次重复使用相同的span , 最好创建一个唯一的span，避免出现之前的span被改变。</p><blockquote><p>When you pass same span by setSpan method, it will check if spans array have same one and replace old start and end value by news.</p></blockquote><p>当使用setSpan方法的时候，方法中会判断是否存在一个相同的spans array ，start 到 end 的值会被最新的替换。</p><p>也就是说，复用span的话，之前的span可能会被最新的span改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/* package */ void setSpan(Object what, int start, int end, int flags) &#123;</div><div class="line">    ...</div><div class="line">  for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">    if (spans[i] == what) &#123;</div><div class="line">        int ostart = mSpanStarts[i];</div><div class="line">        int oend = mSpanEnds[i];</div><div class="line"></div><div class="line">        if (ostart &gt; mGapStart)</div><div class="line">            ostart -= mGapLength;</div><div class="line">        if (oend &gt; mGapStart)</div><div class="line">            oend -= mGapLength;</div><div class="line"></div><div class="line">        mSpanStarts[i] = start;</div><div class="line">        mSpanEnds[i] = end;</div><div class="line">        mSpanFlags[i] = flags;</div><div class="line"></div><div class="line">        if (send) sendSpanChanged(what, ostart, oend, nstart, nend);</div><div class="line"></div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#CharacterStyle.wrap()</p><blockquote><p>CharacterStyle是个抽象类，字符级别的Span都需要继承这个类<br>CharacterStyle拥有很多子类（BackgroundColorSpan，ClickableSpan，ImageSpan，TypefaceSpan等）<br>一个CharacterStyle类型的Span只能给一个Spaned片段使用，如果想这个Span给多个片段使用可以使用wrap方法。<br>其实就是复制了一个CharacterStyle。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static CharacterStyle wrap(CharacterStyle cs) &#123;</div><div class="line">    if (cs instanceof MetricAffectingSpan) &#123;</div><div class="line">        return new MetricAffectingSpan.Passthrough((MetricAffectingSpan) cs);</div><div class="line">    &#125; else &#123;</div><div class="line">        return new Passthrough(cs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>if you use CharacterStyle.wrap() your span is no longer a ClickableSpan instance, but a CharacterStyle.Passthrough instance instead. Therefore getSpans() does not return it anymore and it’s no longer clickable.</p></blockquote><p>如果使用了CharacterStyle.wrap() ， 那么span不会是一个ClickableSpan ，也就是说点击事件会失效。</p><blockquote><p>A given CharacterStyle can only applied to a single region of a given Spanned. If you need to attach the same CharacterStyle to multiple regions, you can use this method to wrap it with a new object that will have the same effect but be a distinct object so that it can also be attached without conflict.</p></blockquote><p>有多个片段的时候使用，解决attached的冲突问题。</p><hr><p>原来如此，是因为没有使用CharacterStyle.wrap()而导致的问题。最后再自定义一个LinkMovementMethod处理click事件，问题就解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29505622/spannablestringbuilder-set-clickablespan-more-than-once-cant-clic
      
    
    </summary>
    
      <category term="android" scheme="http://www.lethisis.com/categories/android/"/>
    
    
      <category term="span" scheme="http://www.lethisis.com/tags/span/"/>
    
      <category term="Android" scheme="http://www.lethisis.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.lethisis.com/2017/10/13/hello-world/"/>
    <id>http://www.lethisis.com/2017/10/13/hello-world/</id>
    <published>2017-10-13T06:09:47.000Z</published>
    <updated>2017-10-13T06:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
